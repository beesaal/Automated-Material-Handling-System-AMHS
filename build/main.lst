ARM GAS  /tmp/cc6AUdwT.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB155:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "robot_servos.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "FreeRTOS.h"
  26:Core/Src/main.c **** #include "task.h"
  27:Core/Src/main.c **** #include "timers.h"
  28:Core/Src/main.c **** #include "queue.h"
  29:Core/Src/main.c **** #include "semphr.h"
  30:Core/Src/main.c **** #include <string.h>
  31:Core/Src/main.c **** #include "event_groups.h"
ARM GAS  /tmp/cc6AUdwT.s 			page 2


  32:Core/Src/main.c **** #include <stdio.h>
  33:Core/Src/main.c **** #include <stdlib.h>
  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** I2S_HandleTypeDef hi2s3;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  59:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** UART_HandleTypeDef huart2;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE BEGIN PV */
  65:Core/Src/main.c **** TaskHandle_t Task01Handle = NULL;
  66:Core/Src/main.c **** TaskHandle_t ButtonPressedHandle = NULL;
  67:Core/Src/main.c **** /* USER CODE END PV */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  70:Core/Src/main.c **** void SystemClock_Config(void);
  71:Core/Src/main.c **** static void MX_GPIO_Init(void);
  72:Core/Src/main.c **** static void MX_I2C2_Init(void);
  73:Core/Src/main.c **** static void MX_I2S3_Init(void);
  74:Core/Src/main.c **** static void MX_SPI2_Init(void);
  75:Core/Src/main.c **** static void MX_TIM3_Init(void);
  76:Core/Src/main.c **** static void MX_TIM4_Init(void);
  77:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  81:Core/Src/main.c **** void Robot_Arm_Movement(void *argument);
  82:Core/Src/main.c **** void ButtonPressed_Fn(void *argument);
  83:Core/Src/main.c **** void ClearScreen();
  84:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument), char *TaskName,
  85:Core/Src/main.c ****     uint16_t StackSize, void *pvParameters, UBaseType_t uxPriority,
  86:Core/Src/main.c ****     TaskHandle_t *TaskHandle);
  87:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle);
  88:Core/Src/main.c **** /* USER CODE END PFP */
ARM GAS  /tmp/cc6AUdwT.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  91:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  92:Core/Src/main.c **** uint8_t TaskAdd(void (*FunctionName)(void *argument), /* Function that implements the task. */
  93:Core/Src/main.c **** char *TaskName, /* Text name for the task. */
  94:Core/Src/main.c **** uint16_t StackSize, /* Stack size in words, not bytes. */
  95:Core/Src/main.c **** void *pvParameters, /* Parameter passed into the task. */
  96:Core/Src/main.c **** UBaseType_t uxPriority, /* Priority at which the task is created. */
  97:Core/Src/main.c **** TaskHandle_t *TaskHandle) /* Used to pass out the taskâ€™s handle. */
  98:Core/Src/main.c **** {
  99:Core/Src/main.c ****   BaseType_t retValue = xTaskCreate(FunctionName, TaskName, StackSize,
 100:Core/Src/main.c ****       pvParameters, uxPriority, TaskHandle);
 101:Core/Src/main.c ****   if (retValue == pdPASS) {
 102:Core/Src/main.c ****     printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 103:Core/Src/main.c ****     return 0;
 104:Core/Src/main.c ****   } else {
 105:Core/Src/main.c ****     printf("---->Failed to add %s\r\n", TaskName);
 106:Core/Src/main.c ****   }
 107:Core/Src/main.c ****   return 1;
 108:Core/Src/main.c **** }
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** void KillTask(TaskHandle_t *TaskHandle) {
 111:Core/Src/main.c ****   vTaskDelete(*TaskHandle);
 112:Core/Src/main.c ****   printf("---->%s Killed\r\n", pcTaskGetName(*TaskHandle));
 113:Core/Src/main.c ****   /* Task gets killed when IDLE Task runs */
 114:Core/Src/main.c ****   *TaskHandle = NULL;
 115:Core/Src/main.c **** }
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** // Function to clear the terminal screen
 118:Core/Src/main.c **** void ClearScreen() {
 119:Core/Src/main.c ****   // ANSI escape code to clear the screen and move cursor to home position
 120:Core/Src/main.c ****   const char *clearCommand = "\033[2J\033[H";
 121:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*) clearCommand, strlen(clearCommand),
 122:Core/Src/main.c ****   HAL_MAX_DELAY);
 123:Core/Src/main.c **** }
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** void ButtonPressed_Fn(void *argument) {
 126:Core/Src/main.c ****   for (;;) {
 127:Core/Src/main.c ****     if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 128:Core/Src/main.c ****       ClearScreen();
 129:Core/Src/main.c ****       vTaskDelay(200);
 130:Core/Src/main.c ****     }
 131:Core/Src/main.c ****   }
 132:Core/Src/main.c **** }
 133:Core/Src/main.c **** /* USER CODE END 0 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** /**
 136:Core/Src/main.c ****   * @brief  The application entry point.
 137:Core/Src/main.c ****   * @retval int
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c **** int main(void)
 140:Core/Src/main.c **** {
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE END 1 */
 145:Core/Src/main.c **** 
ARM GAS  /tmp/cc6AUdwT.s 			page 4


 146:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 149:Core/Src/main.c ****   HAL_Init();
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE END Init */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* Configure the system clock */
 156:Core/Src/main.c ****   SystemClock_Config();
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE END SysInit */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* Initialize all configured peripherals */
 163:Core/Src/main.c ****   MX_GPIO_Init();
 164:Core/Src/main.c ****   MX_I2C2_Init();
 165:Core/Src/main.c ****   MX_I2S3_Init();
 166:Core/Src/main.c ****   MX_SPI2_Init();
 167:Core/Src/main.c ****   MX_TIM3_Init();
 168:Core/Src/main.c ****   MX_TIM4_Init();
 169:Core/Src/main.c ****   MX_USART2_UART_Init();
 170:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 171:Core/Src/main.c ****   printf("!!Setup!!\r\n");
 172:Core/Src/main.c ****   TaskAdd(Robot_Arm_Movement, "Task01", 512, NULL, 8, &Task01Handle);
 173:Core/Src/main.c ****   TaskAdd(ButtonPressed_Fn, "ButtonPressed", 512, NULL, 7,
 174:Core/Src/main.c ****       &ButtonPressedHandle);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /* Start the real time scheduler with preemption */
 177:Core/Src/main.c ****   printf("|** Start Scheduler **|\r\n");
 178:Core/Src/main.c ****   vTaskStartScheduler();
 179:Core/Src/main.c ****   /* USER CODE END 2 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* Infinite loop */
 186:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 187:Core/Src/main.c ****   while (1)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     /* USER CODE END WHILE */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 192:Core/Src/main.c ****   }
 193:Core/Src/main.c ****   /* USER CODE END 3 */
 194:Core/Src/main.c **** }
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** void Robot_Arm_Movement(void *argument){
 197:Core/Src/main.c ****     // Initialize the servo motor 
 198:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 199:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 200:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 201:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 202:Core/Src/main.c **** 
ARM GAS  /tmp/cc6AUdwT.s 			page 5


 203:Core/Src/main.c ****   float hor_deg, hor_len, ver_len;
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   hor_deg = 90;
 206:Core/Src/main.c ****   hor_len = 19;
 207:Core/Src/main.c ****   ver_len = 17;
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   //To Pick
 210:Core/Src/main.c ****   robot_PickItem(hor_deg, hor_len, ver_len);
 211:Core/Src/main.c ****   vTaskDelay(5000);
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   //To Drop 
 214:Core/Src/main.c ****   robot_DropItem(hor_deg, hor_len, ver_len);
 215:Core/Src/main.c ****   vTaskDelay(5000);
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   for (;;) {
 218:Core/Src/main.c ****   }
 219:Core/Src/main.c **** }
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** 
 223:Core/Src/main.c **** PUTCHAR_PROTOTYPE {
 224:Core/Src/main.c ****     /* Place your implementation of fputc here */
 225:Core/Src/main.c ****     /* e.g. write a character to the USART1 and Loop until the end of transmission */
 226:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 227:Core/Src/main.c ****     return ch;
 228:Core/Src/main.c **** }
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** 
 231:Core/Src/main.c **** /**
 232:Core/Src/main.c ****   * @brief System Clock Configuration
 233:Core/Src/main.c ****   * @retval None
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c **** void SystemClock_Config(void)
 236:Core/Src/main.c **** {
 237:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 238:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 243:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 246:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 249:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 250:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 257:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 258:Core/Src/main.c ****   {
 259:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/cc6AUdwT.s 			page 6


 260:Core/Src/main.c ****   }
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 265:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 266:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 267:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c **** }
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** /**
 278:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 279:Core/Src/main.c ****   * @param None
 280:Core/Src/main.c ****   * @retval None
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c **** static void MX_I2C2_Init(void)
 283:Core/Src/main.c **** {
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 292:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 293:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 294:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 295:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 296:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 297:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 298:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 299:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 300:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 301:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 302:Core/Src/main.c ****   {
 303:Core/Src/main.c ****     Error_Handler();
 304:Core/Src/main.c ****   }
 305:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c **** }
 310:Core/Src/main.c **** 
 311:Core/Src/main.c **** /**
 312:Core/Src/main.c ****   * @brief I2S3 Initialization Function
 313:Core/Src/main.c ****   * @param None
 314:Core/Src/main.c ****   * @retval None
 315:Core/Src/main.c ****   */
 316:Core/Src/main.c **** static void MX_I2S3_Init(void)
ARM GAS  /tmp/cc6AUdwT.s 			page 7


 317:Core/Src/main.c **** {
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 0 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE END I2S3_Init 0 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 1 */
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* USER CODE END I2S3_Init 1 */
 326:Core/Src/main.c ****   hi2s3.Instance = SPI3;
 327:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 328:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 329:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 330:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 331:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 332:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 333:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 334:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 335:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 2 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* USER CODE END I2S3_Init 2 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** }
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** /**
 346:Core/Src/main.c ****   * @brief SPI2 Initialization Function
 347:Core/Src/main.c ****   * @param None
 348:Core/Src/main.c ****   * @retval None
 349:Core/Src/main.c ****   */
 350:Core/Src/main.c **** static void MX_SPI2_Init(void)
 351:Core/Src/main.c **** {
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 360:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 361:Core/Src/main.c ****   hspi2.Instance = SPI2;
 362:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 363:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 364:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 365:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 366:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 367:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 368:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 369:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 370:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 371:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 372:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 373:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
ARM GAS  /tmp/cc6AUdwT.s 			page 8


 374:Core/Src/main.c ****   {
 375:Core/Src/main.c ****     Error_Handler();
 376:Core/Src/main.c ****   }
 377:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c **** }
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** /**
 384:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 385:Core/Src/main.c ****   * @param None
 386:Core/Src/main.c ****   * @retval None
 387:Core/Src/main.c ****   */
 388:Core/Src/main.c **** static void MX_TIM3_Init(void)
 389:Core/Src/main.c **** {
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 396:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 397:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 402:Core/Src/main.c ****   htim3.Instance = TIM3;
 403:Core/Src/main.c ****   htim3.Init.Prescaler = 179;
 404:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 405:Core/Src/main.c ****   htim3.Init.Period = 9999;
 406:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 407:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 408:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 409:Core/Src/main.c ****   {
 410:Core/Src/main.c ****     Error_Handler();
 411:Core/Src/main.c ****   }
 412:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 413:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 414:Core/Src/main.c ****   {
 415:Core/Src/main.c ****     Error_Handler();
 416:Core/Src/main.c ****   }
 417:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 418:Core/Src/main.c ****   {
 419:Core/Src/main.c ****     Error_Handler();
 420:Core/Src/main.c ****   }
 421:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 422:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 423:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 424:Core/Src/main.c ****   {
 425:Core/Src/main.c ****     Error_Handler();
 426:Core/Src/main.c ****   }
 427:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 428:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 429:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 430:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/cc6AUdwT.s 			page 9


 431:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 432:Core/Src/main.c ****   {
 433:Core/Src/main.c ****     Error_Handler();
 434:Core/Src/main.c ****   }
 435:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 436:Core/Src/main.c ****   {
 437:Core/Src/main.c ****     Error_Handler();
 438:Core/Src/main.c ****   }
 439:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 440:Core/Src/main.c ****   {
 441:Core/Src/main.c ****     Error_Handler();
 442:Core/Src/main.c ****   }
 443:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 444:Core/Src/main.c ****   {
 445:Core/Src/main.c ****     Error_Handler();
 446:Core/Src/main.c ****   }
 447:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 450:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** }
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** /**
 455:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 456:Core/Src/main.c ****   * @param None
 457:Core/Src/main.c ****   * @retval None
 458:Core/Src/main.c ****   */
 459:Core/Src/main.c **** static void MX_TIM4_Init(void)
 460:Core/Src/main.c **** {
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 467:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 468:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 473:Core/Src/main.c ****   htim4.Instance = TIM4;
 474:Core/Src/main.c ****   htim4.Init.Prescaler = 179;
 475:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 476:Core/Src/main.c ****   htim4.Init.Period = 9999;
 477:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 478:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 479:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 480:Core/Src/main.c ****   {
 481:Core/Src/main.c ****     Error_Handler();
 482:Core/Src/main.c ****   }
 483:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 484:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 485:Core/Src/main.c ****   {
 486:Core/Src/main.c ****     Error_Handler();
 487:Core/Src/main.c ****   }
ARM GAS  /tmp/cc6AUdwT.s 			page 10


 488:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 489:Core/Src/main.c ****   {
 490:Core/Src/main.c ****     Error_Handler();
 491:Core/Src/main.c ****   }
 492:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 493:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 494:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 495:Core/Src/main.c ****   {
 496:Core/Src/main.c ****     Error_Handler();
 497:Core/Src/main.c ****   }
 498:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 499:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 500:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 501:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 502:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 503:Core/Src/main.c ****   {
 504:Core/Src/main.c ****     Error_Handler();
 505:Core/Src/main.c ****   }
 506:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 507:Core/Src/main.c ****   {
 508:Core/Src/main.c ****     Error_Handler();
 509:Core/Src/main.c ****   }
 510:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 513:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
 514:Core/Src/main.c **** 
 515:Core/Src/main.c **** }
 516:Core/Src/main.c **** 
 517:Core/Src/main.c **** /**
 518:Core/Src/main.c ****   * @brief USART2 Initialization Function
 519:Core/Src/main.c ****   * @param None
 520:Core/Src/main.c ****   * @retval None
 521:Core/Src/main.c ****   */
 522:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 523:Core/Src/main.c **** {
 524:Core/Src/main.c **** 
 525:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 526:Core/Src/main.c **** 
 527:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 532:Core/Src/main.c ****   huart2.Instance = USART2;
 533:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 534:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 535:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 536:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 537:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 538:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 539:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 540:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 541:Core/Src/main.c ****   {
 542:Core/Src/main.c ****     Error_Handler();
 543:Core/Src/main.c ****   }
 544:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
ARM GAS  /tmp/cc6AUdwT.s 			page 11


 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 547:Core/Src/main.c **** 
 548:Core/Src/main.c **** }
 549:Core/Src/main.c **** 
 550:Core/Src/main.c **** /**
 551:Core/Src/main.c ****   * @brief GPIO Initialization Function
 552:Core/Src/main.c ****   * @param None
 553:Core/Src/main.c ****   * @retval None
 554:Core/Src/main.c ****   */
 555:Core/Src/main.c **** static void MX_GPIO_Init(void)
 556:Core/Src/main.c **** {
  28              		.loc 1 556 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 557:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 557 3 view .LVU1
  42              		.loc 1 557 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 558:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 559:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 562:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 562 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 562 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 562 3 view .LVU5
  54 0012 224B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 562 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 562 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 562 3 view .LVU8
 563:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
ARM GAS  /tmp/cc6AUdwT.s 			page 12


  66              		.loc 1 563 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 563 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 563 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 563 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 563 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 563 3 view .LVU14
 564:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 564 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 564 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 564 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 564 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 564 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 564 3 view .LVU20
 565:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 565 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 565 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 565 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 565 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 565 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 565 3 view .LVU26
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 568:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 568 3 view .LVU27
 115 0062 0F4D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
ARM GAS  /tmp/cc6AUdwT.s 			page 13


 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 571:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 571 3 view .LVU28
 122              		.loc 1 571 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 572:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 125              		.loc 1 572 3 is_stmt 1 view .LVU30
 126              		.loc 1 572 24 is_stmt 0 view .LVU31
 127 0074 4FF40413 		mov	r3, #2162688
 128 0078 0693     		str	r3, [sp, #24]
 573:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 573 3 is_stmt 1 view .LVU32
 130              		.loc 1 573 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 574:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 574 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 0948     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 577:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 137              		.loc 1 577 3 view .LVU35
 138              		.loc 1 577 23 is_stmt 0 view .LVU36
 139 0084 2023     		movs	r3, #32
 140 0086 0593     		str	r3, [sp, #20]
 578:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 578 3 is_stmt 1 view .LVU37
 142              		.loc 1 578 24 is_stmt 0 view .LVU38
 143 0088 0123     		movs	r3, #1
 144 008a 0693     		str	r3, [sp, #24]
 579:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 579 3 is_stmt 1 view .LVU39
 146              		.loc 1 579 24 is_stmt 0 view .LVU40
 147 008c 0794     		str	r4, [sp, #28]
 580:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 580 3 is_stmt 1 view .LVU41
 149              		.loc 1 580 25 is_stmt 0 view .LVU42
 150 008e 0894     		str	r4, [sp, #32]
 581:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 581 3 is_stmt 1 view .LVU43
 152 0090 05A9     		add	r1, sp, #20
 153 0092 2846     		mov	r0, r5
 154 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 584:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 585:Core/Src/main.c **** }
 156              		.loc 1 585 1 is_stmt 0 view .LVU44
 157 0098 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/cc6AUdwT.s 			page 14


 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 12
 160              		@ sp needed
 161 009a 30BD     		pop	{r4, r5, pc}
 162              	.L4:
 163              		.align	2
 164              	.L3:
 165 009c 00380240 		.word	1073887232
 166 00a0 00000240 		.word	1073872896
 167 00a4 00080240 		.word	1073874944
 168              		.cfi_endproc
 169              	.LFE155:
 171              		.section	.text.Robot_Arm_Movement,"ax",%progbits
 172              		.align	1
 173              		.global	Robot_Arm_Movement
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 178              	Robot_Arm_Movement:
 179              	.LVL3:
 180              	.LFB146:
 196:Core/Src/main.c ****     // Initialize the servo motor 
 181              		.loc 1 196 40 is_stmt 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 196:Core/Src/main.c ****     // Initialize the servo motor 
 185              		.loc 1 196 40 is_stmt 0 view .LVU46
 186 0000 10B5     		push	{r4, lr}
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 4, -8
 190              		.cfi_offset 14, -4
 191 0002 2DED028B 		vpush.64	{d8}
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 80, -16
 195              		.cfi_offset 81, -12
 198:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 196              		.loc 1 198 3 is_stmt 1 view .LVU47
 197 0006 164C     		ldr	r4, .L8
 198 0008 0021     		movs	r1, #0
 199 000a 2046     		mov	r0, r4
 200              	.LVL4:
 198:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 201              		.loc 1 198 3 is_stmt 0 view .LVU48
 202 000c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 203              	.LVL5:
 199:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 204              		.loc 1 199 3 is_stmt 1 view .LVU49
 205 0010 0421     		movs	r1, #4
 206 0012 2046     		mov	r0, r4
 207 0014 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 208              	.LVL6:
 200:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 209              		.loc 1 200 3 view .LVU50
 210 0018 0821     		movs	r1, #8
ARM GAS  /tmp/cc6AUdwT.s 			page 15


 211 001a 2046     		mov	r0, r4
 212 001c FFF7FEFF 		bl	HAL_TIM_PWM_Start
 213              	.LVL7:
 201:Core/Src/main.c **** 
 214              		.loc 1 201 3 view .LVU51
 215 0020 0C21     		movs	r1, #12
 216 0022 2046     		mov	r0, r4
 217 0024 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 218              	.LVL8:
 203:Core/Src/main.c **** 
 219              		.loc 1 203 3 view .LVU52
 205:Core/Src/main.c ****   hor_len = 19;
 220              		.loc 1 205 3 view .LVU53
 206:Core/Src/main.c ****   ver_len = 17;
 221              		.loc 1 206 3 view .LVU54
 207:Core/Src/main.c **** 
 222              		.loc 1 207 3 view .LVU55
 210:Core/Src/main.c ****   vTaskDelay(5000);
 223              		.loc 1 210 3 view .LVU56
 224 0028 9FED0E8A 		vldr.32	s16, .L8+4
 225 002c B3EE011A 		vmov.f32	s2, #1.7e+1
 226 0030 F3EE030A 		vmov.f32	s1, #1.9e+1
 227 0034 B0EE480A 		vmov.f32	s0, s16
 228 0038 FFF7FEFF 		bl	robot_PickItem
 229              	.LVL9:
 211:Core/Src/main.c **** 
 230              		.loc 1 211 3 view .LVU57
 231 003c 41F28830 		movw	r0, #5000
 232 0040 FFF7FEFF 		bl	vTaskDelay
 233              	.LVL10:
 214:Core/Src/main.c ****   vTaskDelay(5000);
 234              		.loc 1 214 3 view .LVU58
 235 0044 B3EE011A 		vmov.f32	s2, #1.7e+1
 236 0048 F3EE030A 		vmov.f32	s1, #1.9e+1
 237 004c B0EE480A 		vmov.f32	s0, s16
 238 0050 FFF7FEFF 		bl	robot_DropItem
 239              	.LVL11:
 215:Core/Src/main.c **** 
 240              		.loc 1 215 3 view .LVU59
 241 0054 41F28830 		movw	r0, #5000
 242 0058 FFF7FEFF 		bl	vTaskDelay
 243              	.LVL12:
 244              	.L6:
 217:Core/Src/main.c ****   }
 245              		.loc 1 217 3 discriminator 1 view .LVU60
 218:Core/Src/main.c **** }
 246              		.loc 1 218 3 discriminator 1 view .LVU61
 217:Core/Src/main.c ****   }
 247              		.loc 1 217 9 discriminator 1 view .LVU62
 248 005c FEE7     		b	.L6
 249              	.L9:
 250 005e 00BF     		.align	2
 251              	.L8:
 252 0060 00000000 		.word	.LANCHOR0
 253 0064 0000B442 		.word	1119092736
 254              		.cfi_endproc
 255              	.LFE146:
ARM GAS  /tmp/cc6AUdwT.s 			page 16


 257              		.section	.rodata.TaskAdd.str1.4,"aMS",%progbits,1
 258              		.align	2
 259              	.LC0:
 260 0000 2D2D2D2D 		.ascii	"---->%s Added\015\012\000"
 260      3E257320 
 260      41646465 
 260      640D0A00 
 261              		.align	2
 262              	.LC1:
 263 0010 2D2D2D2D 		.ascii	"---->Failed to add %s\015\012\000"
 263      3E466169 
 263      6C656420 
 263      746F2061 
 263      64642025 
 264              		.section	.text.TaskAdd,"ax",%progbits
 265              		.align	1
 266              		.global	TaskAdd
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	TaskAdd:
 272              	.LVL13:
 273              	.LFB141:
  98:Core/Src/main.c ****   BaseType_t retValue = xTaskCreate(FunctionName, TaskName, StackSize,
 274              		.loc 1 98 1 view -0
 275              		.cfi_startproc
 276              		@ args = 8, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
  98:Core/Src/main.c ****   BaseType_t retValue = xTaskCreate(FunctionName, TaskName, StackSize,
 278              		.loc 1 98 1 is_stmt 0 view .LVU64
 279 0000 70B5     		push	{r4, r5, r6, lr}
 280              	.LCFI5:
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 4, -16
 283              		.cfi_offset 5, -12
 284              		.cfi_offset 6, -8
 285              		.cfi_offset 14, -4
 286 0002 82B0     		sub	sp, sp, #8
 287              	.LCFI6:
 288              		.cfi_def_cfa_offset 24
 289 0004 0C46     		mov	r4, r1
 290 0006 079D     		ldr	r5, [sp, #28]
  99:Core/Src/main.c ****       pvParameters, uxPriority, TaskHandle);
 291              		.loc 1 99 3 is_stmt 1 view .LVU65
  99:Core/Src/main.c ****       pvParameters, uxPriority, TaskHandle);
 292              		.loc 1 99 25 is_stmt 0 view .LVU66
 293 0008 0195     		str	r5, [sp, #4]
 294 000a 069E     		ldr	r6, [sp, #24]
 295 000c 0096     		str	r6, [sp]
 296 000e FFF7FEFF 		bl	xTaskCreate
 297              	.LVL14:
 101:Core/Src/main.c ****     printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 298              		.loc 1 101 3 is_stmt 1 view .LVU67
 101:Core/Src/main.c ****     printf("---->%s Added\r\n", pcTaskGetName(*TaskHandle));
 299              		.loc 1 101 6 is_stmt 0 view .LVU68
 300 0012 0128     		cmp	r0, #1
 301 0014 06D0     		beq	.L14
ARM GAS  /tmp/cc6AUdwT.s 			page 17


 105:Core/Src/main.c ****   }
 302              		.loc 1 105 5 is_stmt 1 view .LVU69
 303 0016 2146     		mov	r1, r4
 304 0018 0748     		ldr	r0, .L15
 305              	.LVL15:
 105:Core/Src/main.c ****   }
 306              		.loc 1 105 5 is_stmt 0 view .LVU70
 307 001a FFF7FEFF 		bl	printf
 308              	.LVL16:
 107:Core/Src/main.c **** }
 309              		.loc 1 107 3 is_stmt 1 view .LVU71
 107:Core/Src/main.c **** }
 310              		.loc 1 107 10 is_stmt 0 view .LVU72
 311 001e 0120     		movs	r0, #1
 312              	.L12:
 108:Core/Src/main.c **** 
 313              		.loc 1 108 1 view .LVU73
 314 0020 02B0     		add	sp, sp, #8
 315              	.LCFI7:
 316              		.cfi_remember_state
 317              		.cfi_def_cfa_offset 16
 318              		@ sp needed
 319 0022 70BD     		pop	{r4, r5, r6, pc}
 320              	.LVL17:
 321              	.L14:
 322              	.LCFI8:
 323              		.cfi_restore_state
 102:Core/Src/main.c ****     return 0;
 324              		.loc 1 102 5 is_stmt 1 view .LVU74
 325 0024 2868     		ldr	r0, [r5]
 326              	.LVL18:
 102:Core/Src/main.c ****     return 0;
 327              		.loc 1 102 5 is_stmt 0 view .LVU75
 328 0026 FFF7FEFF 		bl	pcTaskGetName
 329              	.LVL19:
 330 002a 0146     		mov	r1, r0
 331 002c 0348     		ldr	r0, .L15+4
 332 002e FFF7FEFF 		bl	printf
 333              	.LVL20:
 103:Core/Src/main.c ****   } else {
 334              		.loc 1 103 5 is_stmt 1 view .LVU76
 103:Core/Src/main.c ****   } else {
 335              		.loc 1 103 12 is_stmt 0 view .LVU77
 336 0032 0020     		movs	r0, #0
 337 0034 F4E7     		b	.L12
 338              	.L16:
 339 0036 00BF     		.align	2
 340              	.L15:
 341 0038 10000000 		.word	.LC1
 342 003c 00000000 		.word	.LC0
 343              		.cfi_endproc
 344              	.LFE141:
 346              		.section	.rodata.KillTask.str1.4,"aMS",%progbits,1
 347              		.align	2
 348              	.LC2:
 349 0000 2D2D2D2D 		.ascii	"---->%s Killed\015\012\000"
 349      3E257320 
ARM GAS  /tmp/cc6AUdwT.s 			page 18


 349      4B696C6C 
 349      65640D0A 
 349      00
 350              		.section	.text.KillTask,"ax",%progbits
 351              		.align	1
 352              		.global	KillTask
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 357              	KillTask:
 358              	.LVL21:
 359              	.LFB142:
 110:Core/Src/main.c ****   vTaskDelete(*TaskHandle);
 360              		.loc 1 110 41 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 110:Core/Src/main.c ****   vTaskDelete(*TaskHandle);
 364              		.loc 1 110 41 is_stmt 0 view .LVU79
 365 0000 10B5     		push	{r4, lr}
 366              	.LCFI9:
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 4, -8
 369              		.cfi_offset 14, -4
 370 0002 0446     		mov	r4, r0
 111:Core/Src/main.c ****   printf("---->%s Killed\r\n", pcTaskGetName(*TaskHandle));
 371              		.loc 1 111 3 is_stmt 1 view .LVU80
 372 0004 0068     		ldr	r0, [r0]
 373              	.LVL22:
 111:Core/Src/main.c ****   printf("---->%s Killed\r\n", pcTaskGetName(*TaskHandle));
 374              		.loc 1 111 3 is_stmt 0 view .LVU81
 375 0006 FFF7FEFF 		bl	vTaskDelete
 376              	.LVL23:
 112:Core/Src/main.c ****   /* Task gets killed when IDLE Task runs */
 377              		.loc 1 112 3 is_stmt 1 view .LVU82
 378 000a 2068     		ldr	r0, [r4]
 379 000c FFF7FEFF 		bl	pcTaskGetName
 380              	.LVL24:
 381 0010 0146     		mov	r1, r0
 382 0012 0348     		ldr	r0, .L19
 383 0014 FFF7FEFF 		bl	printf
 384              	.LVL25:
 114:Core/Src/main.c **** }
 385              		.loc 1 114 3 view .LVU83
 114:Core/Src/main.c **** }
 386              		.loc 1 114 15 is_stmt 0 view .LVU84
 387 0018 0023     		movs	r3, #0
 388 001a 2360     		str	r3, [r4]
 115:Core/Src/main.c **** 
 389              		.loc 1 115 1 view .LVU85
 390 001c 10BD     		pop	{r4, pc}
 391              	.LVL26:
 392              	.L20:
 115:Core/Src/main.c **** 
 393              		.loc 1 115 1 view .LVU86
 394 001e 00BF     		.align	2
 395              	.L19:
ARM GAS  /tmp/cc6AUdwT.s 			page 19


 396 0020 00000000 		.word	.LC2
 397              		.cfi_endproc
 398              	.LFE142:
 400              		.section	.rodata.ClearScreen.str1.4,"aMS",%progbits,1
 401              		.align	2
 402              	.LC3:
 403 0000 1B5B324A 		.ascii	"\033[2J\033[H\000"
 403      1B5B4800 
 404              		.section	.text.ClearScreen,"ax",%progbits
 405              		.align	1
 406              		.global	ClearScreen
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 411              	ClearScreen:
 412              	.LFB143:
 118:Core/Src/main.c ****   // ANSI escape code to clear the screen and move cursor to home position
 413              		.loc 1 118 20 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 08B5     		push	{r3, lr}
 418              	.LCFI10:
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 3, -8
 421              		.cfi_offset 14, -4
 120:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*) clearCommand, strlen(clearCommand),
 422              		.loc 1 120 3 view .LVU88
 423              	.LVL27:
 121:Core/Src/main.c ****   HAL_MAX_DELAY);
 424              		.loc 1 121 3 view .LVU89
 425 0002 4FF0FF33 		mov	r3, #-1
 426 0006 0722     		movs	r2, #7
 427 0008 0249     		ldr	r1, .L23
 428 000a 0348     		ldr	r0, .L23+4
 429 000c FFF7FEFF 		bl	HAL_UART_Transmit
 430              	.LVL28:
 123:Core/Src/main.c **** 
 431              		.loc 1 123 1 is_stmt 0 view .LVU90
 432 0010 08BD     		pop	{r3, pc}
 433              	.L24:
 434 0012 00BF     		.align	2
 435              	.L23:
 436 0014 00000000 		.word	.LC3
 437 0018 00000000 		.word	.LANCHOR1
 438              		.cfi_endproc
 439              	.LFE143:
 441              		.section	.text.ButtonPressed_Fn,"ax",%progbits
 442              		.align	1
 443              		.global	ButtonPressed_Fn
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 448              	ButtonPressed_Fn:
 449              	.LFB144:
 125:Core/Src/main.c ****   for (;;) {
 450              		.loc 1 125 39 is_stmt 1 view -0
ARM GAS  /tmp/cc6AUdwT.s 			page 20


 451              		.cfi_startproc
 452              		@ Volatile: function does not return.
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              	.LVL29:
 125:Core/Src/main.c ****   for (;;) {
 456              		.loc 1 125 39 is_stmt 0 view .LVU92
 457 0000 08B5     		push	{r3, lr}
 458              	.LCFI11:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 3, -8
 461              		.cfi_offset 14, -4
 462              	.LVL30:
 463              	.L26:
 126:Core/Src/main.c ****     if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 464              		.loc 1 126 3 is_stmt 1 view .LVU93
 127:Core/Src/main.c ****       ClearScreen();
 465              		.loc 1 127 5 view .LVU94
 127:Core/Src/main.c ****       ClearScreen();
 466              		.loc 1 127 9 is_stmt 0 view .LVU95
 467 0002 4FF40051 		mov	r1, #8192
 468 0006 0548     		ldr	r0, .L29
 469 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 470              	.LVL31:
 127:Core/Src/main.c ****       ClearScreen();
 471              		.loc 1 127 8 view .LVU96
 472 000c 0028     		cmp	r0, #0
 473 000e F8D1     		bne	.L26
 128:Core/Src/main.c ****       vTaskDelay(200);
 474              		.loc 1 128 7 is_stmt 1 view .LVU97
 475 0010 FFF7FEFF 		bl	ClearScreen
 476              	.LVL32:
 129:Core/Src/main.c ****     }
 477              		.loc 1 129 7 view .LVU98
 478 0014 C820     		movs	r0, #200
 479 0016 FFF7FEFF 		bl	vTaskDelay
 480              	.LVL33:
 481 001a F2E7     		b	.L26
 482              	.L30:
 483              		.align	2
 484              	.L29:
 485 001c 00080240 		.word	1073874944
 486              		.cfi_endproc
 487              	.LFE144:
 489              		.section	.text.__io_putchar,"ax",%progbits
 490              		.align	1
 491              		.global	__io_putchar
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 496              	__io_putchar:
 497              	.LVL34:
 498              	.LFB147:
 223:Core/Src/main.c ****     /* Place your implementation of fputc here */
 499              		.loc 1 223 19 view -0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc6AUdwT.s 			page 21


 502              		@ frame_needed = 0, uses_anonymous_args = 0
 223:Core/Src/main.c ****     /* Place your implementation of fputc here */
 503              		.loc 1 223 19 is_stmt 0 view .LVU100
 504 0000 00B5     		push	{lr}
 505              	.LCFI12:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 14, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              	.LCFI13:
 510              		.cfi_def_cfa_offset 16
 511 0004 0190     		str	r0, [sp, #4]
 226:Core/Src/main.c ****     return ch;
 512              		.loc 1 226 5 is_stmt 1 view .LVU101
 513 0006 4FF6FF73 		movw	r3, #65535
 514 000a 0122     		movs	r2, #1
 515 000c 01A9     		add	r1, sp, #4
 516 000e 0348     		ldr	r0, .L33
 517              	.LVL35:
 226:Core/Src/main.c ****     return ch;
 518              		.loc 1 226 5 is_stmt 0 view .LVU102
 519 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 520              	.LVL36:
 227:Core/Src/main.c **** }
 521              		.loc 1 227 5 is_stmt 1 view .LVU103
 228:Core/Src/main.c **** 
 522              		.loc 1 228 1 is_stmt 0 view .LVU104
 523 0014 0198     		ldr	r0, [sp, #4]
 524 0016 03B0     		add	sp, sp, #12
 525              	.LCFI14:
 526              		.cfi_def_cfa_offset 4
 527              		@ sp needed
 528 0018 5DF804FB 		ldr	pc, [sp], #4
 529              	.L34:
 530              		.align	2
 531              	.L33:
 532 001c 00000000 		.word	.LANCHOR1
 533              		.cfi_endproc
 534              	.LFE147:
 536              		.section	.text.Error_Handler,"ax",%progbits
 537              		.align	1
 538              		.global	Error_Handler
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 543              	Error_Handler:
 544              	.LFB156:
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 588:Core/Src/main.c **** 
 589:Core/Src/main.c **** /* USER CODE END 4 */
 590:Core/Src/main.c **** 
 591:Core/Src/main.c **** 
 592:Core/Src/main.c **** /**
 593:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 594:Core/Src/main.c ****   * @retval None
 595:Core/Src/main.c ****   */
 596:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  /tmp/cc6AUdwT.s 			page 22


 597:Core/Src/main.c **** {
 545              		.loc 1 597 1 is_stmt 1 view -0
 546              		.cfi_startproc
 547              		@ Volatile: function does not return.
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 598:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 599:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 600:Core/Src/main.c ****   __disable_irq();
 551              		.loc 1 600 3 view .LVU106
 552              	.LBB8:
 553              	.LBI8:
 554              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/cc6AUdwT.s 			page 23


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/cc6AUdwT.s 			page 24


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  /tmp/cc6AUdwT.s 			page 25


 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  /tmp/cc6AUdwT.s 			page 26


 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
ARM GAS  /tmp/cc6AUdwT.s 			page 27


 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  /tmp/cc6AUdwT.s 			page 28


 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
ARM GAS  /tmp/cc6AUdwT.s 			page 29


 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
ARM GAS  /tmp/cc6AUdwT.s 			page 30


 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6AUdwT.s 			page 31


 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
ARM GAS  /tmp/cc6AUdwT.s 			page 32


 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
ARM GAS  /tmp/cc6AUdwT.s 			page 33


 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6AUdwT.s 			page 34


 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
ARM GAS  /tmp/cc6AUdwT.s 			page 35


 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6AUdwT.s 			page 36


 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/cc6AUdwT.s 			page 37


 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6AUdwT.s 			page 38


 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc6AUdwT.s 			page 39


 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 555              		.loc 2 960 27 view .LVU107
 556              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 557              		.loc 2 962 3 view .LVU108
 558              		.syntax unified
 559              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 560 0000 72B6     		cpsid i
 561              	@ 0 "" 2
 562              		.thumb
 563              		.syntax unified
 564              	.L36:
 565              	.LBE9:
 566              	.LBE8:
 601:Core/Src/main.c ****   while (1)
 567              		.loc 1 601 3 discriminator 1 view .LVU109
 602:Core/Src/main.c ****   {
 603:Core/Src/main.c ****   }
 568              		.loc 1 603 3 discriminator 1 view .LVU110
 601:Core/Src/main.c ****   while (1)
 569              		.loc 1 601 9 discriminator 1 view .LVU111
 570 0002 FEE7     		b	.L36
 571              		.cfi_endproc
 572              	.LFE156:
 574              		.section	.text.MX_I2C2_Init,"ax",%progbits
 575              		.align	1
 576              		.syntax unified
 577              		.thumb
 578              		.thumb_func
 580              	MX_I2C2_Init:
 581              	.LFB149:
 283:Core/Src/main.c **** 
 582              		.loc 1 283 1 view -0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586 0000 08B5     		push	{r3, lr}
 587              	.LCFI15:
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
 292:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 591              		.loc 1 292 3 view .LVU113
 292:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 592              		.loc 1 292 18 is_stmt 0 view .LVU114
 593 0002 0A48     		ldr	r0, .L41
 594 0004 0A4B     		ldr	r3, .L41+4
 595 0006 0360     		str	r3, [r0]
 293:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 596              		.loc 1 293 3 is_stmt 1 view .LVU115
 293:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 597              		.loc 1 293 25 is_stmt 0 view .LVU116
ARM GAS  /tmp/cc6AUdwT.s 			page 40


 598 0008 0A4B     		ldr	r3, .L41+8
 599 000a 4360     		str	r3, [r0, #4]
 294:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 600              		.loc 1 294 3 is_stmt 1 view .LVU117
 294:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 601              		.loc 1 294 24 is_stmt 0 view .LVU118
 602 000c 0023     		movs	r3, #0
 603 000e 8360     		str	r3, [r0, #8]
 295:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 604              		.loc 1 295 3 is_stmt 1 view .LVU119
 295:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 605              		.loc 1 295 26 is_stmt 0 view .LVU120
 606 0010 C360     		str	r3, [r0, #12]
 296:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 607              		.loc 1 296 3 is_stmt 1 view .LVU121
 296:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 608              		.loc 1 296 29 is_stmt 0 view .LVU122
 609 0012 4FF48042 		mov	r2, #16384
 610 0016 0261     		str	r2, [r0, #16]
 297:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 611              		.loc 1 297 3 is_stmt 1 view .LVU123
 297:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 612              		.loc 1 297 30 is_stmt 0 view .LVU124
 613 0018 4361     		str	r3, [r0, #20]
 298:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 614              		.loc 1 298 3 is_stmt 1 view .LVU125
 298:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 615              		.loc 1 298 26 is_stmt 0 view .LVU126
 616 001a 8361     		str	r3, [r0, #24]
 299:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 617              		.loc 1 299 3 is_stmt 1 view .LVU127
 299:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 618              		.loc 1 299 30 is_stmt 0 view .LVU128
 619 001c C361     		str	r3, [r0, #28]
 300:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 620              		.loc 1 300 3 is_stmt 1 view .LVU129
 300:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 621              		.loc 1 300 28 is_stmt 0 view .LVU130
 622 001e 0362     		str	r3, [r0, #32]
 301:Core/Src/main.c ****   {
 623              		.loc 1 301 3 is_stmt 1 view .LVU131
 301:Core/Src/main.c ****   {
 624              		.loc 1 301 7 is_stmt 0 view .LVU132
 625 0020 FFF7FEFF 		bl	HAL_I2C_Init
 626              	.LVL37:
 301:Core/Src/main.c ****   {
 627              		.loc 1 301 6 view .LVU133
 628 0024 00B9     		cbnz	r0, .L40
 309:Core/Src/main.c **** 
 629              		.loc 1 309 1 view .LVU134
 630 0026 08BD     		pop	{r3, pc}
 631              	.L40:
 303:Core/Src/main.c ****   }
 632              		.loc 1 303 5 is_stmt 1 view .LVU135
 633 0028 FFF7FEFF 		bl	Error_Handler
 634              	.LVL38:
 635              	.L42:
ARM GAS  /tmp/cc6AUdwT.s 			page 41


 636              		.align	2
 637              	.L41:
 638 002c 00000000 		.word	.LANCHOR2
 639 0030 00580040 		.word	1073764352
 640 0034 A0860100 		.word	100000
 641              		.cfi_endproc
 642              	.LFE149:
 644              		.section	.text.MX_I2S3_Init,"ax",%progbits
 645              		.align	1
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 650              	MX_I2S3_Init:
 651              	.LFB150:
 317:Core/Src/main.c **** 
 652              		.loc 1 317 1 view -0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656 0000 08B5     		push	{r3, lr}
 657              	.LCFI16:
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 3, -8
 660              		.cfi_offset 14, -4
 326:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 661              		.loc 1 326 3 view .LVU137
 326:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 662              		.loc 1 326 18 is_stmt 0 view .LVU138
 663 0002 0B48     		ldr	r0, .L47
 664 0004 0B4B     		ldr	r3, .L47+4
 665 0006 0360     		str	r3, [r0]
 327:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 666              		.loc 1 327 3 is_stmt 1 view .LVU139
 327:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 667              		.loc 1 327 19 is_stmt 0 view .LVU140
 668 0008 4FF40073 		mov	r3, #512
 669 000c 4360     		str	r3, [r0, #4]
 328:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 670              		.loc 1 328 3 is_stmt 1 view .LVU141
 328:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 671              		.loc 1 328 23 is_stmt 0 view .LVU142
 672 000e 0023     		movs	r3, #0
 673 0010 8360     		str	r3, [r0, #8]
 329:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 674              		.loc 1 329 3 is_stmt 1 view .LVU143
 329:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 675              		.loc 1 329 25 is_stmt 0 view .LVU144
 676 0012 C360     		str	r3, [r0, #12]
 330:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 677              		.loc 1 330 3 is_stmt 1 view .LVU145
 330:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 678              		.loc 1 330 25 is_stmt 0 view .LVU146
 679 0014 0361     		str	r3, [r0, #16]
 331:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 680              		.loc 1 331 3 is_stmt 1 view .LVU147
 331:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 681              		.loc 1 331 24 is_stmt 0 view .LVU148
ARM GAS  /tmp/cc6AUdwT.s 			page 42


 682 0016 4FF4FA52 		mov	r2, #8000
 683 001a 4261     		str	r2, [r0, #20]
 332:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 684              		.loc 1 332 3 is_stmt 1 view .LVU149
 332:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 685              		.loc 1 332 19 is_stmt 0 view .LVU150
 686 001c 8361     		str	r3, [r0, #24]
 333:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 687              		.loc 1 333 3 is_stmt 1 view .LVU151
 333:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 688              		.loc 1 333 26 is_stmt 0 view .LVU152
 689 001e C361     		str	r3, [r0, #28]
 334:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 690              		.loc 1 334 3 is_stmt 1 view .LVU153
 334:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 691              		.loc 1 334 29 is_stmt 0 view .LVU154
 692 0020 0123     		movs	r3, #1
 693 0022 0362     		str	r3, [r0, #32]
 335:Core/Src/main.c ****   {
 694              		.loc 1 335 3 is_stmt 1 view .LVU155
 335:Core/Src/main.c ****   {
 695              		.loc 1 335 7 is_stmt 0 view .LVU156
 696 0024 FFF7FEFF 		bl	HAL_I2S_Init
 697              	.LVL39:
 335:Core/Src/main.c ****   {
 698              		.loc 1 335 6 view .LVU157
 699 0028 00B9     		cbnz	r0, .L46
 343:Core/Src/main.c **** 
 700              		.loc 1 343 1 view .LVU158
 701 002a 08BD     		pop	{r3, pc}
 702              	.L46:
 337:Core/Src/main.c ****   }
 703              		.loc 1 337 5 is_stmt 1 view .LVU159
 704 002c FFF7FEFF 		bl	Error_Handler
 705              	.LVL40:
 706              	.L48:
 707              		.align	2
 708              	.L47:
 709 0030 00000000 		.word	.LANCHOR3
 710 0034 003C0040 		.word	1073757184
 711              		.cfi_endproc
 712              	.LFE150:
 714              		.section	.text.MX_SPI2_Init,"ax",%progbits
 715              		.align	1
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 720              	MX_SPI2_Init:
 721              	.LFB151:
 351:Core/Src/main.c **** 
 722              		.loc 1 351 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726 0000 08B5     		push	{r3, lr}
 727              	.LCFI17:
 728              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc6AUdwT.s 			page 43


 729              		.cfi_offset 3, -8
 730              		.cfi_offset 14, -4
 361:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 731              		.loc 1 361 3 view .LVU161
 361:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 732              		.loc 1 361 18 is_stmt 0 view .LVU162
 733 0002 0D48     		ldr	r0, .L53
 734 0004 0D4B     		ldr	r3, .L53+4
 735 0006 0360     		str	r3, [r0]
 362:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 736              		.loc 1 362 3 is_stmt 1 view .LVU163
 362:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 737              		.loc 1 362 19 is_stmt 0 view .LVU164
 738 0008 4FF48273 		mov	r3, #260
 739 000c 4360     		str	r3, [r0, #4]
 363:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 740              		.loc 1 363 3 is_stmt 1 view .LVU165
 363:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 741              		.loc 1 363 24 is_stmt 0 view .LVU166
 742 000e 0023     		movs	r3, #0
 743 0010 8360     		str	r3, [r0, #8]
 364:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 744              		.loc 1 364 3 is_stmt 1 view .LVU167
 364:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 745              		.loc 1 364 23 is_stmt 0 view .LVU168
 746 0012 C360     		str	r3, [r0, #12]
 365:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 747              		.loc 1 365 3 is_stmt 1 view .LVU169
 365:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 748              		.loc 1 365 26 is_stmt 0 view .LVU170
 749 0014 0361     		str	r3, [r0, #16]
 366:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 750              		.loc 1 366 3 is_stmt 1 view .LVU171
 366:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 751              		.loc 1 366 23 is_stmt 0 view .LVU172
 752 0016 4361     		str	r3, [r0, #20]
 367:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 753              		.loc 1 367 3 is_stmt 1 view .LVU173
 367:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 754              		.loc 1 367 18 is_stmt 0 view .LVU174
 755 0018 4FF40072 		mov	r2, #512
 756 001c 8261     		str	r2, [r0, #24]
 368:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 757              		.loc 1 368 3 is_stmt 1 view .LVU175
 368:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 758              		.loc 1 368 32 is_stmt 0 view .LVU176
 759 001e C361     		str	r3, [r0, #28]
 369:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 760              		.loc 1 369 3 is_stmt 1 view .LVU177
 369:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 761              		.loc 1 369 23 is_stmt 0 view .LVU178
 762 0020 0362     		str	r3, [r0, #32]
 370:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 763              		.loc 1 370 3 is_stmt 1 view .LVU179
 370:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 764              		.loc 1 370 21 is_stmt 0 view .LVU180
 765 0022 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/cc6AUdwT.s 			page 44


 371:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 766              		.loc 1 371 3 is_stmt 1 view .LVU181
 371:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 767              		.loc 1 371 29 is_stmt 0 view .LVU182
 768 0024 8362     		str	r3, [r0, #40]
 372:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 769              		.loc 1 372 3 is_stmt 1 view .LVU183
 372:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 770              		.loc 1 372 28 is_stmt 0 view .LVU184
 771 0026 0A23     		movs	r3, #10
 772 0028 C362     		str	r3, [r0, #44]
 373:Core/Src/main.c ****   {
 773              		.loc 1 373 3 is_stmt 1 view .LVU185
 373:Core/Src/main.c ****   {
 774              		.loc 1 373 7 is_stmt 0 view .LVU186
 775 002a FFF7FEFF 		bl	HAL_SPI_Init
 776              	.LVL41:
 373:Core/Src/main.c ****   {
 777              		.loc 1 373 6 view .LVU187
 778 002e 00B9     		cbnz	r0, .L52
 381:Core/Src/main.c **** 
 779              		.loc 1 381 1 view .LVU188
 780 0030 08BD     		pop	{r3, pc}
 781              	.L52:
 375:Core/Src/main.c ****   }
 782              		.loc 1 375 5 is_stmt 1 view .LVU189
 783 0032 FFF7FEFF 		bl	Error_Handler
 784              	.LVL42:
 785              	.L54:
 786 0036 00BF     		.align	2
 787              	.L53:
 788 0038 00000000 		.word	.LANCHOR4
 789 003c 00380040 		.word	1073756160
 790              		.cfi_endproc
 791              	.LFE151:
 793              		.section	.text.MX_TIM3_Init,"ax",%progbits
 794              		.align	1
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 799              	MX_TIM3_Init:
 800              	.LFB152:
 389:Core/Src/main.c **** 
 801              		.loc 1 389 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 56
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 805 0000 00B5     		push	{lr}
 806              	.LCFI18:
 807              		.cfi_def_cfa_offset 4
 808              		.cfi_offset 14, -4
 809 0002 8FB0     		sub	sp, sp, #60
 810              	.LCFI19:
 811              		.cfi_def_cfa_offset 64
 395:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 812              		.loc 1 395 3 view .LVU191
 395:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/cc6AUdwT.s 			page 45


 813              		.loc 1 395 26 is_stmt 0 view .LVU192
 814 0004 0023     		movs	r3, #0
 815 0006 0A93     		str	r3, [sp, #40]
 816 0008 0B93     		str	r3, [sp, #44]
 817 000a 0C93     		str	r3, [sp, #48]
 818 000c 0D93     		str	r3, [sp, #52]
 396:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 819              		.loc 1 396 3 is_stmt 1 view .LVU193
 396:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 820              		.loc 1 396 27 is_stmt 0 view .LVU194
 821 000e 0893     		str	r3, [sp, #32]
 822 0010 0993     		str	r3, [sp, #36]
 397:Core/Src/main.c **** 
 823              		.loc 1 397 3 is_stmt 1 view .LVU195
 397:Core/Src/main.c **** 
 824              		.loc 1 397 22 is_stmt 0 view .LVU196
 825 0012 0193     		str	r3, [sp, #4]
 826 0014 0293     		str	r3, [sp, #8]
 827 0016 0393     		str	r3, [sp, #12]
 828 0018 0493     		str	r3, [sp, #16]
 829 001a 0593     		str	r3, [sp, #20]
 830 001c 0693     		str	r3, [sp, #24]
 831 001e 0793     		str	r3, [sp, #28]
 402:Core/Src/main.c ****   htim3.Init.Prescaler = 179;
 832              		.loc 1 402 3 is_stmt 1 view .LVU197
 402:Core/Src/main.c ****   htim3.Init.Prescaler = 179;
 833              		.loc 1 402 18 is_stmt 0 view .LVU198
 834 0020 2C48     		ldr	r0, .L73
 835 0022 2D4A     		ldr	r2, .L73+4
 836 0024 0260     		str	r2, [r0]
 403:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 837              		.loc 1 403 3 is_stmt 1 view .LVU199
 403:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 838              		.loc 1 403 24 is_stmt 0 view .LVU200
 839 0026 B322     		movs	r2, #179
 840 0028 4260     		str	r2, [r0, #4]
 404:Core/Src/main.c ****   htim3.Init.Period = 9999;
 841              		.loc 1 404 3 is_stmt 1 view .LVU201
 404:Core/Src/main.c ****   htim3.Init.Period = 9999;
 842              		.loc 1 404 26 is_stmt 0 view .LVU202
 843 002a 8360     		str	r3, [r0, #8]
 405:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 844              		.loc 1 405 3 is_stmt 1 view .LVU203
 405:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 845              		.loc 1 405 21 is_stmt 0 view .LVU204
 846 002c 42F20F72 		movw	r2, #9999
 847 0030 C260     		str	r2, [r0, #12]
 406:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 848              		.loc 1 406 3 is_stmt 1 view .LVU205
 406:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 849              		.loc 1 406 28 is_stmt 0 view .LVU206
 850 0032 0361     		str	r3, [r0, #16]
 407:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 851              		.loc 1 407 3 is_stmt 1 view .LVU207
 407:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 852              		.loc 1 407 32 is_stmt 0 view .LVU208
 853 0034 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/cc6AUdwT.s 			page 46


 408:Core/Src/main.c ****   {
 854              		.loc 1 408 3 is_stmt 1 view .LVU209
 408:Core/Src/main.c ****   {
 855              		.loc 1 408 7 is_stmt 0 view .LVU210
 856 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 857              	.LVL43:
 408:Core/Src/main.c ****   {
 858              		.loc 1 408 6 view .LVU211
 859 003a 0028     		cmp	r0, #0
 860 003c 39D1     		bne	.L65
 412:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 861              		.loc 1 412 3 is_stmt 1 view .LVU212
 412:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 862              		.loc 1 412 34 is_stmt 0 view .LVU213
 863 003e 4FF48053 		mov	r3, #4096
 864 0042 0A93     		str	r3, [sp, #40]
 413:Core/Src/main.c ****   {
 865              		.loc 1 413 3 is_stmt 1 view .LVU214
 413:Core/Src/main.c ****   {
 866              		.loc 1 413 7 is_stmt 0 view .LVU215
 867 0044 0AA9     		add	r1, sp, #40
 868 0046 2348     		ldr	r0, .L73
 869 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 870              	.LVL44:
 413:Core/Src/main.c ****   {
 871              		.loc 1 413 6 view .LVU216
 872 004c 0028     		cmp	r0, #0
 873 004e 32D1     		bne	.L66
 417:Core/Src/main.c ****   {
 874              		.loc 1 417 3 is_stmt 1 view .LVU217
 417:Core/Src/main.c ****   {
 875              		.loc 1 417 7 is_stmt 0 view .LVU218
 876 0050 2048     		ldr	r0, .L73
 877 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 878              	.LVL45:
 417:Core/Src/main.c ****   {
 879              		.loc 1 417 6 view .LVU219
 880 0056 0028     		cmp	r0, #0
 881 0058 2FD1     		bne	.L67
 421:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 882              		.loc 1 421 3 is_stmt 1 view .LVU220
 421:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 883              		.loc 1 421 37 is_stmt 0 view .LVU221
 884 005a 0023     		movs	r3, #0
 885 005c 0893     		str	r3, [sp, #32]
 422:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 886              		.loc 1 422 3 is_stmt 1 view .LVU222
 422:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 887              		.loc 1 422 33 is_stmt 0 view .LVU223
 888 005e 0993     		str	r3, [sp, #36]
 423:Core/Src/main.c ****   {
 889              		.loc 1 423 3 is_stmt 1 view .LVU224
 423:Core/Src/main.c ****   {
 890              		.loc 1 423 7 is_stmt 0 view .LVU225
 891 0060 08A9     		add	r1, sp, #32
 892 0062 1C48     		ldr	r0, .L73
 893 0064 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/cc6AUdwT.s 			page 47


 894              	.LVL46:
 423:Core/Src/main.c ****   {
 895              		.loc 1 423 6 view .LVU226
 896 0068 48BB     		cbnz	r0, .L68
 427:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 897              		.loc 1 427 3 is_stmt 1 view .LVU227
 427:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 898              		.loc 1 427 20 is_stmt 0 view .LVU228
 899 006a 6023     		movs	r3, #96
 900 006c 0193     		str	r3, [sp, #4]
 428:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 901              		.loc 1 428 3 is_stmt 1 view .LVU229
 428:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 902              		.loc 1 428 19 is_stmt 0 view .LVU230
 903 006e 0022     		movs	r2, #0
 904 0070 0292     		str	r2, [sp, #8]
 429:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 905              		.loc 1 429 3 is_stmt 1 view .LVU231
 429:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 906              		.loc 1 429 24 is_stmt 0 view .LVU232
 907 0072 0392     		str	r2, [sp, #12]
 430:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 908              		.loc 1 430 3 is_stmt 1 view .LVU233
 430:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 909              		.loc 1 430 24 is_stmt 0 view .LVU234
 910 0074 0592     		str	r2, [sp, #20]
 431:Core/Src/main.c ****   {
 911              		.loc 1 431 3 is_stmt 1 view .LVU235
 431:Core/Src/main.c ****   {
 912              		.loc 1 431 7 is_stmt 0 view .LVU236
 913 0076 01A9     		add	r1, sp, #4
 914 0078 1648     		ldr	r0, .L73
 915 007a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 916              	.LVL47:
 431:Core/Src/main.c ****   {
 917              		.loc 1 431 6 view .LVU237
 918 007e 00BB     		cbnz	r0, .L69
 435:Core/Src/main.c ****   {
 919              		.loc 1 435 3 is_stmt 1 view .LVU238
 435:Core/Src/main.c ****   {
 920              		.loc 1 435 7 is_stmt 0 view .LVU239
 921 0080 0422     		movs	r2, #4
 922 0082 0DEB0201 		add	r1, sp, r2
 923 0086 1348     		ldr	r0, .L73
 924 0088 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 925              	.LVL48:
 435:Core/Src/main.c ****   {
 926              		.loc 1 435 6 view .LVU240
 927 008c D8B9     		cbnz	r0, .L70
 439:Core/Src/main.c ****   {
 928              		.loc 1 439 3 is_stmt 1 view .LVU241
 439:Core/Src/main.c ****   {
 929              		.loc 1 439 7 is_stmt 0 view .LVU242
 930 008e 0822     		movs	r2, #8
 931 0090 01A9     		add	r1, sp, #4
 932 0092 1048     		ldr	r0, .L73
 933 0094 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/cc6AUdwT.s 			page 48


 934              	.LVL49:
 439:Core/Src/main.c ****   {
 935              		.loc 1 439 6 view .LVU243
 936 0098 B8B9     		cbnz	r0, .L71
 443:Core/Src/main.c ****   {
 937              		.loc 1 443 3 is_stmt 1 view .LVU244
 443:Core/Src/main.c ****   {
 938              		.loc 1 443 7 is_stmt 0 view .LVU245
 939 009a 0C22     		movs	r2, #12
 940 009c 01A9     		add	r1, sp, #4
 941 009e 0D48     		ldr	r0, .L73
 942 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 943              	.LVL50:
 443:Core/Src/main.c ****   {
 944              		.loc 1 443 6 view .LVU246
 945 00a4 98B9     		cbnz	r0, .L72
 450:Core/Src/main.c **** 
 946              		.loc 1 450 3 is_stmt 1 view .LVU247
 947 00a6 0B48     		ldr	r0, .L73
 948 00a8 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 949              	.LVL51:
 452:Core/Src/main.c **** 
 950              		.loc 1 452 1 is_stmt 0 view .LVU248
 951 00ac 0FB0     		add	sp, sp, #60
 952              	.LCFI20:
 953              		.cfi_remember_state
 954              		.cfi_def_cfa_offset 4
 955              		@ sp needed
 956 00ae 5DF804FB 		ldr	pc, [sp], #4
 957              	.L65:
 958              	.LCFI21:
 959              		.cfi_restore_state
 410:Core/Src/main.c ****   }
 960              		.loc 1 410 5 is_stmt 1 view .LVU249
 961 00b2 FFF7FEFF 		bl	Error_Handler
 962              	.LVL52:
 963              	.L66:
 415:Core/Src/main.c ****   }
 964              		.loc 1 415 5 view .LVU250
 965 00b6 FFF7FEFF 		bl	Error_Handler
 966              	.LVL53:
 967              	.L67:
 419:Core/Src/main.c ****   }
 968              		.loc 1 419 5 view .LVU251
 969 00ba FFF7FEFF 		bl	Error_Handler
 970              	.LVL54:
 971              	.L68:
 425:Core/Src/main.c ****   }
 972              		.loc 1 425 5 view .LVU252
 973 00be FFF7FEFF 		bl	Error_Handler
 974              	.LVL55:
 975              	.L69:
 433:Core/Src/main.c ****   }
 976              		.loc 1 433 5 view .LVU253
 977 00c2 FFF7FEFF 		bl	Error_Handler
 978              	.LVL56:
 979              	.L70:
ARM GAS  /tmp/cc6AUdwT.s 			page 49


 437:Core/Src/main.c ****   }
 980              		.loc 1 437 5 view .LVU254
 981 00c6 FFF7FEFF 		bl	Error_Handler
 982              	.LVL57:
 983              	.L71:
 441:Core/Src/main.c ****   }
 984              		.loc 1 441 5 view .LVU255
 985 00ca FFF7FEFF 		bl	Error_Handler
 986              	.LVL58:
 987              	.L72:
 445:Core/Src/main.c ****   }
 988              		.loc 1 445 5 view .LVU256
 989 00ce FFF7FEFF 		bl	Error_Handler
 990              	.LVL59:
 991              	.L74:
 992 00d2 00BF     		.align	2
 993              	.L73:
 994 00d4 00000000 		.word	.LANCHOR0
 995 00d8 00040040 		.word	1073742848
 996              		.cfi_endproc
 997              	.LFE152:
 999              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1000              		.align	1
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1005              	MX_TIM4_Init:
 1006              	.LFB153:
 460:Core/Src/main.c **** 
 1007              		.loc 1 460 1 view -0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 56
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 1011 0000 00B5     		push	{lr}
 1012              	.LCFI22:
 1013              		.cfi_def_cfa_offset 4
 1014              		.cfi_offset 14, -4
 1015 0002 8FB0     		sub	sp, sp, #60
 1016              	.LCFI23:
 1017              		.cfi_def_cfa_offset 64
 466:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1018              		.loc 1 466 3 view .LVU258
 466:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1019              		.loc 1 466 26 is_stmt 0 view .LVU259
 1020 0004 0023     		movs	r3, #0
 1021 0006 0A93     		str	r3, [sp, #40]
 1022 0008 0B93     		str	r3, [sp, #44]
 1023 000a 0C93     		str	r3, [sp, #48]
 1024 000c 0D93     		str	r3, [sp, #52]
 467:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1025              		.loc 1 467 3 is_stmt 1 view .LVU260
 467:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1026              		.loc 1 467 27 is_stmt 0 view .LVU261
 1027 000e 0893     		str	r3, [sp, #32]
 1028 0010 0993     		str	r3, [sp, #36]
 468:Core/Src/main.c **** 
 1029              		.loc 1 468 3 is_stmt 1 view .LVU262
ARM GAS  /tmp/cc6AUdwT.s 			page 50


 468:Core/Src/main.c **** 
 1030              		.loc 1 468 22 is_stmt 0 view .LVU263
 1031 0012 0193     		str	r3, [sp, #4]
 1032 0014 0293     		str	r3, [sp, #8]
 1033 0016 0393     		str	r3, [sp, #12]
 1034 0018 0493     		str	r3, [sp, #16]
 1035 001a 0593     		str	r3, [sp, #20]
 1036 001c 0693     		str	r3, [sp, #24]
 1037 001e 0793     		str	r3, [sp, #28]
 473:Core/Src/main.c ****   htim4.Init.Prescaler = 179;
 1038              		.loc 1 473 3 is_stmt 1 view .LVU264
 473:Core/Src/main.c ****   htim4.Init.Prescaler = 179;
 1039              		.loc 1 473 18 is_stmt 0 view .LVU265
 1040 0020 2248     		ldr	r0, .L89
 1041 0022 234A     		ldr	r2, .L89+4
 1042 0024 0260     		str	r2, [r0]
 474:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1043              		.loc 1 474 3 is_stmt 1 view .LVU266
 474:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1044              		.loc 1 474 24 is_stmt 0 view .LVU267
 1045 0026 B322     		movs	r2, #179
 1046 0028 4260     		str	r2, [r0, #4]
 475:Core/Src/main.c ****   htim4.Init.Period = 9999;
 1047              		.loc 1 475 3 is_stmt 1 view .LVU268
 475:Core/Src/main.c ****   htim4.Init.Period = 9999;
 1048              		.loc 1 475 26 is_stmt 0 view .LVU269
 1049 002a 8360     		str	r3, [r0, #8]
 476:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1050              		.loc 1 476 3 is_stmt 1 view .LVU270
 476:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1051              		.loc 1 476 21 is_stmt 0 view .LVU271
 1052 002c 42F20F72 		movw	r2, #9999
 1053 0030 C260     		str	r2, [r0, #12]
 477:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1054              		.loc 1 477 3 is_stmt 1 view .LVU272
 477:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1055              		.loc 1 477 28 is_stmt 0 view .LVU273
 1056 0032 0361     		str	r3, [r0, #16]
 478:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1057              		.loc 1 478 3 is_stmt 1 view .LVU274
 478:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1058              		.loc 1 478 32 is_stmt 0 view .LVU275
 1059 0034 8361     		str	r3, [r0, #24]
 479:Core/Src/main.c ****   {
 1060              		.loc 1 479 3 is_stmt 1 view .LVU276
 479:Core/Src/main.c ****   {
 1061              		.loc 1 479 7 is_stmt 0 view .LVU277
 1062 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1063              	.LVL60:
 479:Core/Src/main.c ****   {
 1064              		.loc 1 479 6 view .LVU278
 1065 003a 58BB     		cbnz	r0, .L83
 483:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1066              		.loc 1 483 3 is_stmt 1 view .LVU279
 483:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 1067              		.loc 1 483 34 is_stmt 0 view .LVU280
 1068 003c 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/cc6AUdwT.s 			page 51


 1069 0040 0A93     		str	r3, [sp, #40]
 484:Core/Src/main.c ****   {
 1070              		.loc 1 484 3 is_stmt 1 view .LVU281
 484:Core/Src/main.c ****   {
 1071              		.loc 1 484 7 is_stmt 0 view .LVU282
 1072 0042 0AA9     		add	r1, sp, #40
 1073 0044 1948     		ldr	r0, .L89
 1074 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1075              	.LVL61:
 484:Core/Src/main.c ****   {
 1076              		.loc 1 484 6 view .LVU283
 1077 004a 28BB     		cbnz	r0, .L84
 488:Core/Src/main.c ****   {
 1078              		.loc 1 488 3 is_stmt 1 view .LVU284
 488:Core/Src/main.c ****   {
 1079              		.loc 1 488 7 is_stmt 0 view .LVU285
 1080 004c 1748     		ldr	r0, .L89
 1081 004e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1082              	.LVL62:
 488:Core/Src/main.c ****   {
 1083              		.loc 1 488 6 view .LVU286
 1084 0052 18BB     		cbnz	r0, .L85
 492:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1085              		.loc 1 492 3 is_stmt 1 view .LVU287
 492:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1086              		.loc 1 492 37 is_stmt 0 view .LVU288
 1087 0054 0023     		movs	r3, #0
 1088 0056 0893     		str	r3, [sp, #32]
 493:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1089              		.loc 1 493 3 is_stmt 1 view .LVU289
 493:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1090              		.loc 1 493 33 is_stmt 0 view .LVU290
 1091 0058 0993     		str	r3, [sp, #36]
 494:Core/Src/main.c ****   {
 1092              		.loc 1 494 3 is_stmt 1 view .LVU291
 494:Core/Src/main.c ****   {
 1093              		.loc 1 494 7 is_stmt 0 view .LVU292
 1094 005a 08A9     		add	r1, sp, #32
 1095 005c 1348     		ldr	r0, .L89
 1096 005e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1097              	.LVL63:
 494:Core/Src/main.c ****   {
 1098              		.loc 1 494 6 view .LVU293
 1099 0062 E8B9     		cbnz	r0, .L86
 498:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1100              		.loc 1 498 3 is_stmt 1 view .LVU294
 498:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1101              		.loc 1 498 20 is_stmt 0 view .LVU295
 1102 0064 6023     		movs	r3, #96
 1103 0066 0193     		str	r3, [sp, #4]
 499:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1104              		.loc 1 499 3 is_stmt 1 view .LVU296
 499:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1105              		.loc 1 499 19 is_stmt 0 view .LVU297
 1106 0068 0022     		movs	r2, #0
 1107 006a 0292     		str	r2, [sp, #8]
 500:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
ARM GAS  /tmp/cc6AUdwT.s 			page 52


 1108              		.loc 1 500 3 is_stmt 1 view .LVU298
 500:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1109              		.loc 1 500 24 is_stmt 0 view .LVU299
 1110 006c 0392     		str	r2, [sp, #12]
 501:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1111              		.loc 1 501 3 is_stmt 1 view .LVU300
 501:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1112              		.loc 1 501 24 is_stmt 0 view .LVU301
 1113 006e 0592     		str	r2, [sp, #20]
 502:Core/Src/main.c ****   {
 1114              		.loc 1 502 3 is_stmt 1 view .LVU302
 502:Core/Src/main.c ****   {
 1115              		.loc 1 502 7 is_stmt 0 view .LVU303
 1116 0070 01A9     		add	r1, sp, #4
 1117 0072 0E48     		ldr	r0, .L89
 1118 0074 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1119              	.LVL64:
 502:Core/Src/main.c ****   {
 1120              		.loc 1 502 6 view .LVU304
 1121 0078 A0B9     		cbnz	r0, .L87
 506:Core/Src/main.c ****   {
 1122              		.loc 1 506 3 is_stmt 1 view .LVU305
 506:Core/Src/main.c ****   {
 1123              		.loc 1 506 7 is_stmt 0 view .LVU306
 1124 007a 0422     		movs	r2, #4
 1125 007c 0DEB0201 		add	r1, sp, r2
 1126 0080 0A48     		ldr	r0, .L89
 1127 0082 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1128              	.LVL65:
 506:Core/Src/main.c ****   {
 1129              		.loc 1 506 6 view .LVU307
 1130 0086 78B9     		cbnz	r0, .L88
 513:Core/Src/main.c **** 
 1131              		.loc 1 513 3 is_stmt 1 view .LVU308
 1132 0088 0848     		ldr	r0, .L89
 1133 008a FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1134              	.LVL66:
 515:Core/Src/main.c **** 
 1135              		.loc 1 515 1 is_stmt 0 view .LVU309
 1136 008e 0FB0     		add	sp, sp, #60
 1137              	.LCFI24:
 1138              		.cfi_remember_state
 1139              		.cfi_def_cfa_offset 4
 1140              		@ sp needed
 1141 0090 5DF804FB 		ldr	pc, [sp], #4
 1142              	.L83:
 1143              	.LCFI25:
 1144              		.cfi_restore_state
 481:Core/Src/main.c ****   }
 1145              		.loc 1 481 5 is_stmt 1 view .LVU310
 1146 0094 FFF7FEFF 		bl	Error_Handler
 1147              	.LVL67:
 1148              	.L84:
 486:Core/Src/main.c ****   }
 1149              		.loc 1 486 5 view .LVU311
 1150 0098 FFF7FEFF 		bl	Error_Handler
 1151              	.LVL68:
ARM GAS  /tmp/cc6AUdwT.s 			page 53


 1152              	.L85:
 490:Core/Src/main.c ****   }
 1153              		.loc 1 490 5 view .LVU312
 1154 009c FFF7FEFF 		bl	Error_Handler
 1155              	.LVL69:
 1156              	.L86:
 496:Core/Src/main.c ****   }
 1157              		.loc 1 496 5 view .LVU313
 1158 00a0 FFF7FEFF 		bl	Error_Handler
 1159              	.LVL70:
 1160              	.L87:
 504:Core/Src/main.c ****   }
 1161              		.loc 1 504 5 view .LVU314
 1162 00a4 FFF7FEFF 		bl	Error_Handler
 1163              	.LVL71:
 1164              	.L88:
 508:Core/Src/main.c ****   }
 1165              		.loc 1 508 5 view .LVU315
 1166 00a8 FFF7FEFF 		bl	Error_Handler
 1167              	.LVL72:
 1168              	.L90:
 1169              		.align	2
 1170              	.L89:
 1171 00ac 00000000 		.word	.LANCHOR5
 1172 00b0 00080040 		.word	1073743872
 1173              		.cfi_endproc
 1174              	.LFE153:
 1176              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1177              		.align	1
 1178              		.syntax unified
 1179              		.thumb
 1180              		.thumb_func
 1182              	MX_USART2_UART_Init:
 1183              	.LFB154:
 523:Core/Src/main.c **** 
 1184              		.loc 1 523 1 view -0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188 0000 08B5     		push	{r3, lr}
 1189              	.LCFI26:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 3, -8
 1192              		.cfi_offset 14, -4
 532:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1193              		.loc 1 532 3 view .LVU317
 532:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1194              		.loc 1 532 19 is_stmt 0 view .LVU318
 1195 0002 0A48     		ldr	r0, .L95
 1196 0004 0A4B     		ldr	r3, .L95+4
 1197 0006 0360     		str	r3, [r0]
 533:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1198              		.loc 1 533 3 is_stmt 1 view .LVU319
 533:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1199              		.loc 1 533 24 is_stmt 0 view .LVU320
 1200 0008 4FF4E133 		mov	r3, #115200
 1201 000c 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/cc6AUdwT.s 			page 54


 534:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1202              		.loc 1 534 3 is_stmt 1 view .LVU321
 534:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1203              		.loc 1 534 26 is_stmt 0 view .LVU322
 1204 000e 0023     		movs	r3, #0
 1205 0010 8360     		str	r3, [r0, #8]
 535:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1206              		.loc 1 535 3 is_stmt 1 view .LVU323
 535:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1207              		.loc 1 535 24 is_stmt 0 view .LVU324
 1208 0012 C360     		str	r3, [r0, #12]
 536:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1209              		.loc 1 536 3 is_stmt 1 view .LVU325
 536:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1210              		.loc 1 536 22 is_stmt 0 view .LVU326
 1211 0014 0361     		str	r3, [r0, #16]
 537:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1212              		.loc 1 537 3 is_stmt 1 view .LVU327
 537:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1213              		.loc 1 537 20 is_stmt 0 view .LVU328
 1214 0016 0C22     		movs	r2, #12
 1215 0018 4261     		str	r2, [r0, #20]
 538:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1216              		.loc 1 538 3 is_stmt 1 view .LVU329
 538:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1217              		.loc 1 538 25 is_stmt 0 view .LVU330
 1218 001a 8361     		str	r3, [r0, #24]
 539:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1219              		.loc 1 539 3 is_stmt 1 view .LVU331
 539:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1220              		.loc 1 539 28 is_stmt 0 view .LVU332
 1221 001c C361     		str	r3, [r0, #28]
 540:Core/Src/main.c ****   {
 1222              		.loc 1 540 3 is_stmt 1 view .LVU333
 540:Core/Src/main.c ****   {
 1223              		.loc 1 540 7 is_stmt 0 view .LVU334
 1224 001e FFF7FEFF 		bl	HAL_UART_Init
 1225              	.LVL73:
 540:Core/Src/main.c ****   {
 1226              		.loc 1 540 6 view .LVU335
 1227 0022 00B9     		cbnz	r0, .L94
 548:Core/Src/main.c **** 
 1228              		.loc 1 548 1 view .LVU336
 1229 0024 08BD     		pop	{r3, pc}
 1230              	.L94:
 542:Core/Src/main.c ****   }
 1231              		.loc 1 542 5 is_stmt 1 view .LVU337
 1232 0026 FFF7FEFF 		bl	Error_Handler
 1233              	.LVL74:
 1234              	.L96:
 1235 002a 00BF     		.align	2
 1236              	.L95:
 1237 002c 00000000 		.word	.LANCHOR1
 1238 0030 00440040 		.word	1073759232
 1239              		.cfi_endproc
 1240              	.LFE154:
 1242              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/cc6AUdwT.s 			page 55


 1243              		.align	1
 1244              		.global	SystemClock_Config
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1249              	SystemClock_Config:
 1250              	.LFB148:
 236:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1251              		.loc 1 236 1 view -0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 80
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255 0000 00B5     		push	{lr}
 1256              	.LCFI27:
 1257              		.cfi_def_cfa_offset 4
 1258              		.cfi_offset 14, -4
 1259 0002 95B0     		sub	sp, sp, #84
 1260              	.LCFI28:
 1261              		.cfi_def_cfa_offset 88
 237:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1262              		.loc 1 237 3 view .LVU339
 237:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1263              		.loc 1 237 22 is_stmt 0 view .LVU340
 1264 0004 3022     		movs	r2, #48
 1265 0006 0021     		movs	r1, #0
 1266 0008 08A8     		add	r0, sp, #32
 1267 000a FFF7FEFF 		bl	memset
 1268              	.LVL75:
 238:Core/Src/main.c **** 
 1269              		.loc 1 238 3 is_stmt 1 view .LVU341
 238:Core/Src/main.c **** 
 1270              		.loc 1 238 22 is_stmt 0 view .LVU342
 1271 000e 0023     		movs	r3, #0
 1272 0010 0393     		str	r3, [sp, #12]
 1273 0012 0493     		str	r3, [sp, #16]
 1274 0014 0593     		str	r3, [sp, #20]
 1275 0016 0693     		str	r3, [sp, #24]
 1276 0018 0793     		str	r3, [sp, #28]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1277              		.loc 1 242 3 is_stmt 1 view .LVU343
 1278              	.LBB10:
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1279              		.loc 1 242 3 view .LVU344
 1280 001a 0193     		str	r3, [sp, #4]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1281              		.loc 1 242 3 view .LVU345
 1282 001c 1E4A     		ldr	r2, .L103
 1283 001e 116C     		ldr	r1, [r2, #64]
 1284 0020 41F08051 		orr	r1, r1, #268435456
 1285 0024 1164     		str	r1, [r2, #64]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1286              		.loc 1 242 3 view .LVU346
 1287 0026 126C     		ldr	r2, [r2, #64]
 1288 0028 02F08052 		and	r2, r2, #268435456
 1289 002c 0192     		str	r2, [sp, #4]
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1290              		.loc 1 242 3 view .LVU347
ARM GAS  /tmp/cc6AUdwT.s 			page 56


 1291 002e 019A     		ldr	r2, [sp, #4]
 1292              	.LBE10:
 242:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1293              		.loc 1 242 3 view .LVU348
 243:Core/Src/main.c **** 
 1294              		.loc 1 243 3 view .LVU349
 1295              	.LBB11:
 243:Core/Src/main.c **** 
 1296              		.loc 1 243 3 view .LVU350
 1297 0030 0293     		str	r3, [sp, #8]
 243:Core/Src/main.c **** 
 1298              		.loc 1 243 3 view .LVU351
 1299 0032 1A4A     		ldr	r2, .L103+4
 1300 0034 1168     		ldr	r1, [r2]
 1301 0036 41F44041 		orr	r1, r1, #49152
 1302 003a 1160     		str	r1, [r2]
 243:Core/Src/main.c **** 
 1303              		.loc 1 243 3 view .LVU352
 1304 003c 1268     		ldr	r2, [r2]
 1305 003e 02F44042 		and	r2, r2, #49152
 1306 0042 0292     		str	r2, [sp, #8]
 243:Core/Src/main.c **** 
 1307              		.loc 1 243 3 view .LVU353
 1308 0044 029A     		ldr	r2, [sp, #8]
 1309              	.LBE11:
 243:Core/Src/main.c **** 
 1310              		.loc 1 243 3 view .LVU354
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1311              		.loc 1 248 3 view .LVU355
 248:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1312              		.loc 1 248 36 is_stmt 0 view .LVU356
 1313 0046 0221     		movs	r1, #2
 1314 0048 0891     		str	r1, [sp, #32]
 249:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1315              		.loc 1 249 3 is_stmt 1 view .LVU357
 249:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1316              		.loc 1 249 30 is_stmt 0 view .LVU358
 1317 004a 0122     		movs	r2, #1
 1318 004c 0B92     		str	r2, [sp, #44]
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1319              		.loc 1 250 3 is_stmt 1 view .LVU359
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1320              		.loc 1 250 41 is_stmt 0 view .LVU360
 1321 004e 1022     		movs	r2, #16
 1322 0050 0C92     		str	r2, [sp, #48]
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1323              		.loc 1 251 3 is_stmt 1 view .LVU361
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1324              		.loc 1 251 34 is_stmt 0 view .LVU362
 1325 0052 0E91     		str	r1, [sp, #56]
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1326              		.loc 1 252 3 is_stmt 1 view .LVU363
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1327              		.loc 1 252 35 is_stmt 0 view .LVU364
 1328 0054 0F93     		str	r3, [sp, #60]
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1329              		.loc 1 253 3 is_stmt 1 view .LVU365
ARM GAS  /tmp/cc6AUdwT.s 			page 57


 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1330              		.loc 1 253 30 is_stmt 0 view .LVU366
 1331 0056 1092     		str	r2, [sp, #64]
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1332              		.loc 1 254 3 is_stmt 1 view .LVU367
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1333              		.loc 1 254 30 is_stmt 0 view .LVU368
 1334 0058 4FF4A873 		mov	r3, #336
 1335 005c 1193     		str	r3, [sp, #68]
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1336              		.loc 1 255 3 is_stmt 1 view .LVU369
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1337              		.loc 1 255 30 is_stmt 0 view .LVU370
 1338 005e 0423     		movs	r3, #4
 1339 0060 1293     		str	r3, [sp, #72]
 256:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1340              		.loc 1 256 3 is_stmt 1 view .LVU371
 256:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1341              		.loc 1 256 30 is_stmt 0 view .LVU372
 1342 0062 1393     		str	r3, [sp, #76]
 257:Core/Src/main.c ****   {
 1343              		.loc 1 257 3 is_stmt 1 view .LVU373
 257:Core/Src/main.c ****   {
 1344              		.loc 1 257 7 is_stmt 0 view .LVU374
 1345 0064 08A8     		add	r0, sp, #32
 1346 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1347              	.LVL76:
 257:Core/Src/main.c ****   {
 1348              		.loc 1 257 6 view .LVU375
 1349 006a 80B9     		cbnz	r0, .L101
 264:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1350              		.loc 1 264 3 is_stmt 1 view .LVU376
 264:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1351              		.loc 1 264 31 is_stmt 0 view .LVU377
 1352 006c 0F23     		movs	r3, #15
 1353 006e 0393     		str	r3, [sp, #12]
 266:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1354              		.loc 1 266 3 is_stmt 1 view .LVU378
 266:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1355              		.loc 1 266 34 is_stmt 0 view .LVU379
 1356 0070 0221     		movs	r1, #2
 1357 0072 0491     		str	r1, [sp, #16]
 267:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1358              		.loc 1 267 3 is_stmt 1 view .LVU380
 267:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1359              		.loc 1 267 35 is_stmt 0 view .LVU381
 1360 0074 0023     		movs	r3, #0
 1361 0076 0593     		str	r3, [sp, #20]
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1362              		.loc 1 268 3 is_stmt 1 view .LVU382
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1363              		.loc 1 268 36 is_stmt 0 view .LVU383
 1364 0078 4FF48052 		mov	r2, #4096
 1365 007c 0692     		str	r2, [sp, #24]
 269:Core/Src/main.c **** 
 1366              		.loc 1 269 3 is_stmt 1 view .LVU384
 269:Core/Src/main.c **** 
ARM GAS  /tmp/cc6AUdwT.s 			page 58


 1367              		.loc 1 269 36 is_stmt 0 view .LVU385
 1368 007e 0793     		str	r3, [sp, #28]
 271:Core/Src/main.c ****   {
 1369              		.loc 1 271 3 is_stmt 1 view .LVU386
 271:Core/Src/main.c ****   {
 1370              		.loc 1 271 7 is_stmt 0 view .LVU387
 1371 0080 03A8     		add	r0, sp, #12
 1372 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1373              	.LVL77:
 271:Core/Src/main.c ****   {
 1374              		.loc 1 271 6 view .LVU388
 1375 0086 20B9     		cbnz	r0, .L102
 275:Core/Src/main.c **** 
 1376              		.loc 1 275 1 view .LVU389
 1377 0088 15B0     		add	sp, sp, #84
 1378              	.LCFI29:
 1379              		.cfi_remember_state
 1380              		.cfi_def_cfa_offset 4
 1381              		@ sp needed
 1382 008a 5DF804FB 		ldr	pc, [sp], #4
 1383              	.L101:
 1384              	.LCFI30:
 1385              		.cfi_restore_state
 259:Core/Src/main.c ****   }
 1386              		.loc 1 259 5 is_stmt 1 view .LVU390
 1387 008e FFF7FEFF 		bl	Error_Handler
 1388              	.LVL78:
 1389              	.L102:
 273:Core/Src/main.c ****   }
 1390              		.loc 1 273 5 view .LVU391
 1391 0092 FFF7FEFF 		bl	Error_Handler
 1392              	.LVL79:
 1393              	.L104:
 1394 0096 00BF     		.align	2
 1395              	.L103:
 1396 0098 00380240 		.word	1073887232
 1397 009c 00700040 		.word	1073770496
 1398              		.cfi_endproc
 1399              	.LFE148:
 1401              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1402              		.align	2
 1403              	.LC4:
 1404 0000 21215365 		.ascii	"!!Setup!!\015\000"
 1404      74757021 
 1404      210D00
 1405 000b 00       		.align	2
 1406              	.LC5:
 1407 000c 5461736B 		.ascii	"Task01\000"
 1407      303100
 1408 0013 00       		.align	2
 1409              	.LC6:
 1410 0014 42757474 		.ascii	"ButtonPressed\000"
 1410      6F6E5072 
 1410      65737365 
 1410      6400
 1411 0022 0000     		.align	2
 1412              	.LC7:
ARM GAS  /tmp/cc6AUdwT.s 			page 59


 1413 0024 7C2A2A20 		.ascii	"|** Start Scheduler **|\015\000"
 1413      53746172 
 1413      74205363 
 1413      68656475 
 1413      6C657220 
 1414              		.section	.text.main,"ax",%progbits
 1415              		.align	1
 1416              		.global	main
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1421              	main:
 1422              	.LFB145:
 140:Core/Src/main.c **** 
 1423              		.loc 1 140 1 view -0
 1424              		.cfi_startproc
 1425              		@ Volatile: function does not return.
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 0, uses_anonymous_args = 0
 1428 0000 00B5     		push	{lr}
 1429              	.LCFI31:
 1430              		.cfi_def_cfa_offset 4
 1431              		.cfi_offset 14, -4
 1432 0002 83B0     		sub	sp, sp, #12
 1433              	.LCFI32:
 1434              		.cfi_def_cfa_offset 16
 149:Core/Src/main.c **** 
 1435              		.loc 1 149 3 view .LVU393
 1436 0004 FFF7FEFF 		bl	HAL_Init
 1437              	.LVL80:
 156:Core/Src/main.c **** 
 1438              		.loc 1 156 3 view .LVU394
 1439 0008 FFF7FEFF 		bl	SystemClock_Config
 1440              	.LVL81:
 163:Core/Src/main.c ****   MX_I2C2_Init();
 1441              		.loc 1 163 3 view .LVU395
 1442 000c FFF7FEFF 		bl	MX_GPIO_Init
 1443              	.LVL82:
 164:Core/Src/main.c ****   MX_I2S3_Init();
 1444              		.loc 1 164 3 view .LVU396
 1445 0010 FFF7FEFF 		bl	MX_I2C2_Init
 1446              	.LVL83:
 165:Core/Src/main.c ****   MX_SPI2_Init();
 1447              		.loc 1 165 3 view .LVU397
 1448 0014 FFF7FEFF 		bl	MX_I2S3_Init
 1449              	.LVL84:
 166:Core/Src/main.c ****   MX_TIM3_Init();
 1450              		.loc 1 166 3 view .LVU398
 1451 0018 FFF7FEFF 		bl	MX_SPI2_Init
 1452              	.LVL85:
 167:Core/Src/main.c ****   MX_TIM4_Init();
 1453              		.loc 1 167 3 view .LVU399
 1454 001c FFF7FEFF 		bl	MX_TIM3_Init
 1455              	.LVL86:
 168:Core/Src/main.c ****   MX_USART2_UART_Init();
 1456              		.loc 1 168 3 view .LVU400
 1457 0020 FFF7FEFF 		bl	MX_TIM4_Init
ARM GAS  /tmp/cc6AUdwT.s 			page 60


 1458              	.LVL87:
 169:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1459              		.loc 1 169 3 view .LVU401
 1460 0024 FFF7FEFF 		bl	MX_USART2_UART_Init
 1461              	.LVL88:
 171:Core/Src/main.c ****   TaskAdd(Robot_Arm_Movement, "Task01", 512, NULL, 8, &Task01Handle);
 1462              		.loc 1 171 3 view .LVU402
 1463 0028 0F48     		ldr	r0, .L108
 1464 002a FFF7FEFF 		bl	puts
 1465              	.LVL89:
 172:Core/Src/main.c ****   TaskAdd(ButtonPressed_Fn, "ButtonPressed", 512, NULL, 7,
 1466              		.loc 1 172 3 view .LVU403
 1467 002e 0F4B     		ldr	r3, .L108+4
 1468 0030 0193     		str	r3, [sp, #4]
 1469 0032 0823     		movs	r3, #8
 1470 0034 0093     		str	r3, [sp]
 1471 0036 0023     		movs	r3, #0
 1472 0038 4FF40072 		mov	r2, #512
 1473 003c 0C49     		ldr	r1, .L108+8
 1474 003e 0D48     		ldr	r0, .L108+12
 1475 0040 FFF7FEFF 		bl	TaskAdd
 1476              	.LVL90:
 173:Core/Src/main.c ****       &ButtonPressedHandle);
 1477              		.loc 1 173 3 view .LVU404
 1478 0044 0C4B     		ldr	r3, .L108+16
 1479 0046 0193     		str	r3, [sp, #4]
 1480 0048 0723     		movs	r3, #7
 1481 004a 0093     		str	r3, [sp]
 1482 004c 0023     		movs	r3, #0
 1483 004e 4FF40072 		mov	r2, #512
 1484 0052 0A49     		ldr	r1, .L108+20
 1485 0054 0A48     		ldr	r0, .L108+24
 1486 0056 FFF7FEFF 		bl	TaskAdd
 1487              	.LVL91:
 177:Core/Src/main.c ****   vTaskStartScheduler();
 1488              		.loc 1 177 3 view .LVU405
 1489 005a 0A48     		ldr	r0, .L108+28
 1490 005c FFF7FEFF 		bl	puts
 1491              	.LVL92:
 178:Core/Src/main.c ****   /* USER CODE END 2 */
 1492              		.loc 1 178 3 view .LVU406
 1493 0060 FFF7FEFF 		bl	vTaskStartScheduler
 1494              	.LVL93:
 1495              	.L106:
 187:Core/Src/main.c ****   {
 1496              		.loc 1 187 3 discriminator 1 view .LVU407
 192:Core/Src/main.c ****   /* USER CODE END 3 */
 1497              		.loc 1 192 3 discriminator 1 view .LVU408
 187:Core/Src/main.c ****   {
 1498              		.loc 1 187 9 discriminator 1 view .LVU409
 1499 0064 FEE7     		b	.L106
 1500              	.L109:
 1501 0066 00BF     		.align	2
 1502              	.L108:
 1503 0068 00000000 		.word	.LC4
 1504 006c 00000000 		.word	.LANCHOR6
 1505 0070 0C000000 		.word	.LC5
ARM GAS  /tmp/cc6AUdwT.s 			page 61


 1506 0074 00000000 		.word	Robot_Arm_Movement
 1507 0078 00000000 		.word	.LANCHOR7
 1508 007c 14000000 		.word	.LC6
 1509 0080 00000000 		.word	ButtonPressed_Fn
 1510 0084 24000000 		.word	.LC7
 1511              		.cfi_endproc
 1512              	.LFE145:
 1514              		.global	ButtonPressedHandle
 1515              		.global	Task01Handle
 1516              		.global	huart2
 1517              		.global	htim4
 1518              		.global	htim3
 1519              		.global	hspi2
 1520              		.global	hi2s3
 1521              		.global	hi2c2
 1522              		.section	.bss.ButtonPressedHandle,"aw",%nobits
 1523              		.align	2
 1524              		.set	.LANCHOR7,. + 0
 1527              	ButtonPressedHandle:
 1528 0000 00000000 		.space	4
 1529              		.section	.bss.Task01Handle,"aw",%nobits
 1530              		.align	2
 1531              		.set	.LANCHOR6,. + 0
 1534              	Task01Handle:
 1535 0000 00000000 		.space	4
 1536              		.section	.bss.hi2c2,"aw",%nobits
 1537              		.align	2
 1538              		.set	.LANCHOR2,. + 0
 1541              	hi2c2:
 1542 0000 00000000 		.space	84
 1542      00000000 
 1542      00000000 
 1542      00000000 
 1542      00000000 
 1543              		.section	.bss.hi2s3,"aw",%nobits
 1544              		.align	2
 1545              		.set	.LANCHOR3,. + 0
 1548              	hi2s3:
 1549 0000 00000000 		.space	72
 1549      00000000 
 1549      00000000 
 1549      00000000 
 1549      00000000 
 1550              		.section	.bss.hspi2,"aw",%nobits
 1551              		.align	2
 1552              		.set	.LANCHOR4,. + 0
 1555              	hspi2:
 1556 0000 00000000 		.space	88
 1556      00000000 
 1556      00000000 
 1556      00000000 
 1556      00000000 
 1557              		.section	.bss.htim3,"aw",%nobits
 1558              		.align	2
 1559              		.set	.LANCHOR0,. + 0
 1562              	htim3:
 1563 0000 00000000 		.space	72
ARM GAS  /tmp/cc6AUdwT.s 			page 62


 1563      00000000 
 1563      00000000 
 1563      00000000 
 1563      00000000 
 1564              		.section	.bss.htim4,"aw",%nobits
 1565              		.align	2
 1566              		.set	.LANCHOR5,. + 0
 1569              	htim4:
 1570 0000 00000000 		.space	72
 1570      00000000 
 1570      00000000 
 1570      00000000 
 1570      00000000 
 1571              		.section	.bss.huart2,"aw",%nobits
 1572              		.align	2
 1573              		.set	.LANCHOR1,. + 0
 1576              	huart2:
 1577 0000 00000000 		.space	72
 1577      00000000 
 1577      00000000 
 1577      00000000 
 1577      00000000 
 1578              		.text
 1579              	.Letext0:
 1580              		.file 3 "/usr/local/arm-none-eabi/include/machine/_default_types.h"
 1581              		.file 4 "/usr/local/arm-none-eabi/include/sys/_stdint.h"
 1582              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1583              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1584              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1585              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1586              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1587              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1588              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1589              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 1590              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1591              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1592              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1593              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1594              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1595              		.file 18 "Core/Inc/robot_servos.h"
 1596              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1597              		.file 20 "Core/Inc/main.h"
 1598              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1599              		.file 22 "<built-in>"
 1600              		.file 23 "/usr/local/arm-none-eabi/include/stdio.h"
ARM GAS  /tmp/cc6AUdwT.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6AUdwT.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc6AUdwT.s:165    .text.MX_GPIO_Init:000000000000009c $d
     /tmp/cc6AUdwT.s:172    .text.Robot_Arm_Movement:0000000000000000 $t
     /tmp/cc6AUdwT.s:178    .text.Robot_Arm_Movement:0000000000000000 Robot_Arm_Movement
     /tmp/cc6AUdwT.s:252    .text.Robot_Arm_Movement:0000000000000060 $d
     /tmp/cc6AUdwT.s:258    .rodata.TaskAdd.str1.4:0000000000000000 $d
     /tmp/cc6AUdwT.s:265    .text.TaskAdd:0000000000000000 $t
     /tmp/cc6AUdwT.s:271    .text.TaskAdd:0000000000000000 TaskAdd
     /tmp/cc6AUdwT.s:341    .text.TaskAdd:0000000000000038 $d
     /tmp/cc6AUdwT.s:347    .rodata.KillTask.str1.4:0000000000000000 $d
     /tmp/cc6AUdwT.s:351    .text.KillTask:0000000000000000 $t
     /tmp/cc6AUdwT.s:357    .text.KillTask:0000000000000000 KillTask
     /tmp/cc6AUdwT.s:396    .text.KillTask:0000000000000020 $d
     /tmp/cc6AUdwT.s:401    .rodata.ClearScreen.str1.4:0000000000000000 $d
     /tmp/cc6AUdwT.s:405    .text.ClearScreen:0000000000000000 $t
     /tmp/cc6AUdwT.s:411    .text.ClearScreen:0000000000000000 ClearScreen
     /tmp/cc6AUdwT.s:436    .text.ClearScreen:0000000000000014 $d
     /tmp/cc6AUdwT.s:442    .text.ButtonPressed_Fn:0000000000000000 $t
     /tmp/cc6AUdwT.s:448    .text.ButtonPressed_Fn:0000000000000000 ButtonPressed_Fn
     /tmp/cc6AUdwT.s:485    .text.ButtonPressed_Fn:000000000000001c $d
     /tmp/cc6AUdwT.s:490    .text.__io_putchar:0000000000000000 $t
     /tmp/cc6AUdwT.s:496    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cc6AUdwT.s:532    .text.__io_putchar:000000000000001c $d
     /tmp/cc6AUdwT.s:537    .text.Error_Handler:0000000000000000 $t
     /tmp/cc6AUdwT.s:543    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6AUdwT.s:575    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:580    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/cc6AUdwT.s:638    .text.MX_I2C2_Init:000000000000002c $d
     /tmp/cc6AUdwT.s:645    .text.MX_I2S3_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:650    .text.MX_I2S3_Init:0000000000000000 MX_I2S3_Init
     /tmp/cc6AUdwT.s:709    .text.MX_I2S3_Init:0000000000000030 $d
     /tmp/cc6AUdwT.s:715    .text.MX_SPI2_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:720    .text.MX_SPI2_Init:0000000000000000 MX_SPI2_Init
     /tmp/cc6AUdwT.s:788    .text.MX_SPI2_Init:0000000000000038 $d
     /tmp/cc6AUdwT.s:794    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:799    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc6AUdwT.s:994    .text.MX_TIM3_Init:00000000000000d4 $d
     /tmp/cc6AUdwT.s:1000   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:1005   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/cc6AUdwT.s:1171   .text.MX_TIM4_Init:00000000000000ac $d
     /tmp/cc6AUdwT.s:1177   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc6AUdwT.s:1182   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc6AUdwT.s:1237   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/cc6AUdwT.s:1243   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6AUdwT.s:1249   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc6AUdwT.s:1396   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc6AUdwT.s:1402   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc6AUdwT.s:1415   .text.main:0000000000000000 $t
     /tmp/cc6AUdwT.s:1421   .text.main:0000000000000000 main
     /tmp/cc6AUdwT.s:1503   .text.main:0000000000000068 $d
     /tmp/cc6AUdwT.s:1527   .bss.ButtonPressedHandle:0000000000000000 ButtonPressedHandle
     /tmp/cc6AUdwT.s:1534   .bss.Task01Handle:0000000000000000 Task01Handle
     /tmp/cc6AUdwT.s:1576   .bss.huart2:0000000000000000 huart2
     /tmp/cc6AUdwT.s:1569   .bss.htim4:0000000000000000 htim4
ARM GAS  /tmp/cc6AUdwT.s 			page 64


     /tmp/cc6AUdwT.s:1562   .bss.htim3:0000000000000000 htim3
     /tmp/cc6AUdwT.s:1555   .bss.hspi2:0000000000000000 hspi2
     /tmp/cc6AUdwT.s:1548   .bss.hi2s3:0000000000000000 hi2s3
     /tmp/cc6AUdwT.s:1541   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/cc6AUdwT.s:1523   .bss.ButtonPressedHandle:0000000000000000 $d
     /tmp/cc6AUdwT.s:1530   .bss.Task01Handle:0000000000000000 $d
     /tmp/cc6AUdwT.s:1537   .bss.hi2c2:0000000000000000 $d
     /tmp/cc6AUdwT.s:1544   .bss.hi2s3:0000000000000000 $d
     /tmp/cc6AUdwT.s:1551   .bss.hspi2:0000000000000000 $d
     /tmp/cc6AUdwT.s:1558   .bss.htim3:0000000000000000 $d
     /tmp/cc6AUdwT.s:1565   .bss.htim4:0000000000000000 $d
     /tmp/cc6AUdwT.s:1572   .bss.huart2:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_PWM_Start
robot_PickItem
vTaskDelay
robot_DropItem
xTaskCreate
printf
pcTaskGetName
vTaskDelete
HAL_UART_Transmit
HAL_GPIO_ReadPin
HAL_I2C_Init
HAL_I2S_Init
HAL_SPI_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
puts
vTaskStartScheduler
